<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-22T14:01:24.218Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mariaDB高级技巧</title>
    <link href="http://yoursite.com/2020/04/21/sneior-for-mariadb/"/>
    <id>http://yoursite.com/2020/04/21/sneior-for-mariadb/</id>
    <published>2020-04-21T12:15:05.000Z</published>
    <updated>2020-04-22T14:01:24.218Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>对mariaDB高级部分的记录（简单记录，太详细会浪费大量时间）</em></strong></p><a id="more"></a><hr><ul><li><p><strong>MariaDB创建函数</strong></p><ul><li><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>   </span><br><span class="line">[ DEFINER = &#123; <span class="keyword">CURRENT_USER</span> | user_name &#125; ]   </span><br><span class="line"><span class="keyword">FUNCTION</span> function_name [ (parameter datatype [, parameter datatype]) ]  </span><br><span class="line"><span class="keyword">RETURNS</span> return_datatype [ <span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span>  </span><br><span class="line">| <span class="keyword">DETERMINISTIC</span>  </span><br><span class="line">| <span class="keyword">NOT</span> <span class="keyword">DETERMINISTIC</span>  </span><br><span class="line">| &#123; CONTAINS <span class="keyword">SQL</span>   </span><br><span class="line">| <span class="keyword">NO</span> <span class="keyword">SQL</span>  </span><br><span class="line">| <span class="keyword">READS</span> <span class="keyword">SQL</span> <span class="keyword">DATA</span>  </span><br><span class="line">| MODIFIES <span class="keyword">SQL</span> <span class="keyword">DATA</span> &#125;  </span><br><span class="line">| <span class="keyword">SQL</span> <span class="keyword">SECURITY</span> &#123; DEFINER | INVOKER &#125;  </span><br><span class="line">| <span class="keyword">COMMENT</span> <span class="string">'comment_value'</span>  </span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">    declaration_section  </span><br><span class="line">    executable_section  </span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> CalcValue ( starting_value <span class="built_in">INT</span> )</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">INT</span> <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> total_value <span class="built_in">INT</span>;<span class="comment"># 声明一个变量</span></span><br><span class="line">    <span class="keyword">SET</span> total_value = <span class="number">0</span>;<span class="comment"># 为变量赋值</span></span><br><span class="line">    label1: WHILE total_value &lt;= 3000 DO# 循环</span><br><span class="line">    <span class="keyword">SET</span> total_value = total_value + starting_value;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span> label1;<span class="comment"># 结束循环</span></span><br><span class="line">    RETURN total_value;<span class="comment"># 返回值</span></span><br><span class="line"><span class="keyword">END</span>; //<span class="comment"># 结束循环</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></li><li><p>参数说明</p><ul><li>DEFINER子句：它是一个可选的子句。如果没有指定，定义者是创建函数的用户。 如果您希望指定不同的定义者，则必须包含DEFINER子句，其中user_name是该函数的定义者。</li><li>function_name：指定要在MariaDB中分配给此函数的名称。</li><li>return_datatype：它指定函数返回值的数据类型。</li><li>LANGUAGE SQL：语法为可移植语法，但不会影响函数。</li><li>DETERMINISTIC：表示该函数将总是返回给定一组输入参数的一个结果。</li><li>NOT DETERMINISTIC：表示给定一组输入参数，该函数可能会返回不同的结果。 结果可能受到表数据，随机数字或服务器变量的影响。</li><li>CONTAINS SQL：这是默认的。这是一个告知MariaDB该函数包含SQL的信息性子句，但数据库不验证为真。</li><li>NO SQL：没有使用的信息性子句将不会影响函数。</li><li>READS SQL DATA：一个告知MariaDB该函数将使用SELECT语句读取数据但不修改任何数据的信息性子句。</li><li>MODIFIES SQL DATA：一个告知MariaDB该函数将使用INSERT，UPDATE，DELETE或其他DDL语句修改SQL数据的信息性子句。</li><li>declaration_section：声明局部变量的函数的地方。</li><li>executable_section：在函数中输入函数代码的地方。</li></ul></li></ul></li><li><p><strong>MariaDB过程</strong></p><ul><li><p>语法</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>   </span><br><span class="line">[ DEFINER = &#123; <span class="keyword">CURRENT_USER</span> | user_name &#125; ]   </span><br><span class="line"><span class="keyword">PROCEDURE</span> procedure_name [ (parameter datatype [, parameter datatype]) ]  </span><br><span class="line">[ <span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span>  </span><br><span class="line">| <span class="keyword">DETERMINISTIC</span>  </span><br><span class="line">| <span class="keyword">NOT</span> <span class="keyword">DETERMINISTIC</span>  </span><br><span class="line">| &#123; CONTAINS <span class="keyword">SQL</span>   </span><br><span class="line">| <span class="keyword">NO</span> <span class="keyword">SQL</span>  </span><br><span class="line">| <span class="keyword">READS</span> <span class="keyword">SQL</span> <span class="keyword">DATA</span>  </span><br><span class="line">| MODIFIES <span class="keyword">SQL</span> <span class="keyword">DATA</span> &#125;  </span><br><span class="line">| <span class="keyword">SQL</span> <span class="keyword">SECURITY</span> &#123; DEFINER | INVOKER &#125;  </span><br><span class="line">| <span class="keyword">COMMENT</span> <span class="string">'comment_value'</span>  </span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">declaration_section  </span><br><span class="line">executable_section  </span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></li><li><p>参数说明</p><ul><li>DEFINER：可选。procedure_name：在MariaDB中分配给此过程的名称。</li><li>Parameter：传入过程的一个或多个参数。创建过程时，可以声明三种类型的参数：<ul><li>IN：参数可以被程序引用。 该参数的值不能被程序覆盖。</li><li>OUT：参数不能被程序引用，但参数的值可以被程序覆盖。</li><li>IN OUT：参数可以被程序引用，参数的值可以被程序覆盖。</li></ul></li><li>LANGUAGE SQL：语法为可移植语法，但不会影响函数。</li><li>DETERMINISTIC：表示该函数将始终返回给定一组输入参数的一个结果。</li><li>NOT DETERMINISTIC：表示给定一组输入参数，该函数可能会返回不同的结果。 结果可能受到表格数据，随机数字或服务器变量的影响。</li><li>CONTAINS SQL：这是默认的。这是一个告知MariaDB该函数包含SQL的信息性子句，但数据库不验证它是真的。</li><li>NO SQL：这是一个信息性子句，不使用也不会影响功能。</li><li>READS SQL DATA：这是一个告知MariaDB的函数，它将使用SELECT语句读取数据，但不会修改任何数据。</li><li>MODIFIES SQL DATA：这是一个告知MariaDB的信息子句，该函数将使用INSERT，UPDATE，DELETE或其他DDL语句修改SQL数据。</li><li>declaration_section：声明局部变量的过程中的位置。</li><li>executable_section：输入过程代码的过程中的位置。</li></ul></li><li><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">procedure</span> CalcValue ( <span class="keyword">OUT</span> ending_value <span class="built_in">INT</span> )  </span><br><span class="line"><span class="keyword">DETERMINISTIC</span>  </span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line"><span class="keyword">DECLARE</span> total_value <span class="built_in">INT</span>;  </span><br><span class="line"><span class="keyword">SET</span> total_value = <span class="number">50</span>;  </span><br><span class="line">label1: WHILE total_value &lt;= 3000 DO  </span><br><span class="line">    <span class="keyword">SET</span> total_value = total_value * <span class="number">2</span>;  </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span> label1;  </span><br><span class="line"><span class="keyword">SET</span> ending_value = total_value;  </span><br><span class="line"><span class="keyword">END</span>; //  </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></li><li><p>删除过程</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">procedure</span> [ <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ] procedure_name;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>MariaDB正则表达式</strong></p><ul><li>详见之前学习爬虫时关于<a href="https://www.johnaki.xyz/2020/04/13/re-note/" target="_blank" rel="noopener">re库的笔记</a>。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;对mariaDB高级部分的记录（简单记录，太详细会浪费大量时间）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>mariaDB符号</title>
    <link href="http://yoursite.com/2020/04/21/sign-for-mariadb/"/>
    <id>http://yoursite.com/2020/04/21/sign-for-mariadb/</id>
    <published>2020-04-21T08:40:24.000Z</published>
    <updated>2020-04-22T14:01:34.961Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>对mariaDB操作符的记录（简单记录，太详细会浪费大量时间）</em></strong></p><a id="more"></a><hr><ul><li><p><strong>比较运算符</strong></p><table><thead><tr><th align="center">编号</th><th align="center">比较运算符</th><th align="center">描述</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">=</td><td align="center">比较等于</td><td align="center">select * from students where id=100</td></tr><tr><td align="center">2</td><td align="center">&lt;=&gt;</td><td align="center">比较等于(安全比较NULL值)</td><td align="center">select * from students where student_name&lt;=&gt;’Maxsu’</td></tr><tr><td align="center">3</td><td align="center">&lt;&gt;</td><td align="center">比较不等于</td><td align="center">select * from students where student_name&lt;&gt;’Maxsu’</td></tr><tr><td align="center">4</td><td align="center">!=</td><td align="center">比较不等于</td><td align="center">select * from students where student_name!=’Maxsu’</td></tr><tr><td align="center">5</td><td align="center">&gt;</td><td align="center">比较大于</td><td align="center">select * from students where student_id&gt;5</td></tr><tr><td align="center">6</td><td align="center">&gt;=</td><td align="center">比较大于或等于</td><td align="center">select * from students where student_id&gt;=5</td></tr><tr><td align="center">7</td><td align="center">&lt;</td><td align="center">比较小于</td><td align="center">select * from students where student_id&lt;5</td></tr><tr><td align="center">8</td><td align="center">&lt;=</td><td align="center">比较小于或等于</td><td align="center">select * from students where student_id&lt;=5</td></tr><tr><td align="center">9</td><td align="center">in ( )</td><td align="center">匹配列表中的值</td><td align="center">select * from students where student_id IN(1,3,6)</td></tr><tr><td align="center">10</td><td align="center">not</td><td align="center">否定一个条件</td><td align="center">select * from students where student_id  NOT IN(1,3,6)</td></tr><tr><td align="center">11</td><td align="center">between</td><td align="center">匹配在一个范围内(含)</td><td align="center">select * from students where student_id between 1 AND 3)</td></tr><tr><td align="center">12</td><td align="center">is null</td><td align="center">判断是否为NULL值</td><td align="center">select * from students where student_address IS NULL</td></tr><tr><td align="center">13</td><td align="center">is not null</td><td align="center">判断是否为非NULL值</td><td align="center">select * from students where student_address IS NOT NULL</td></tr><tr><td align="center">14</td><td align="center">like</td><td align="center">与%和_模式匹配</td><td align="center">select * from students where student_name LIKE ‘Ma%’</td></tr><tr><td align="center">15</td><td align="center">exists</td><td align="center">如果子查询返回至少一行，则满足条件。</td><td align="center">—</td></tr></tbody></table></li><li><p><strong>Union运算符</strong></p><ul><li>UNION运算符用于组合两个或更多SELECT语句的结果集。它删除各种SELECT语句之间的重复行。</li><li>UNION运算符中的每个SELECT语句在具有相似数据类型的结果集中必须具有相同数量的字段。</li><li>使用ORDER BY子句的UNION运算符从两个表中检索多个列。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions]  </span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">DISTINCT</span>]  </span><br><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Union All运算符</strong></p><ul><li>UNION ALL操作符与UNION操作符相同，但不会删除重复的记录。它返回查询中的所有行，并且不删除各种SELECT语句之间的重复行。</li><li>UNION All运算符中的每个SELECT语句在具有相似数据类型的结果集中必须具有相同数量的字段。</li><li>使用ORDER BY子句的UNION运算符从两个表中检索多个列。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions]  </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span>  </span><br><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Intersect运算符</strong></p><ul><li>INTERSECT运算符用于返回2个或更多表的交集。 如果两个表中都存在记录，它将被包含在INTERSECT结果中。 否则，它将从INTERSECT结果中被省略。</li><li>MariaDB不支持INTERSECT运算符，但是通过使用IN运算符来模拟INTERSECT查询，可以看到相同的结果，如下示例中所示。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions]  </span><br><span class="line"><span class="keyword">INTERSECT</span>  </span><br><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;对mariaDB操作符的记录（简单记录，太详细会浪费大量时间）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>mariaDB连接</title>
    <link href="http://yoursite.com/2020/04/21/connection-for-mariadb/"/>
    <id>http://yoursite.com/2020/04/21/connection-for-mariadb/</id>
    <published>2020-04-21T08:20:42.000Z</published>
    <updated>2020-04-21T08:39:45.935Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>对mariaDB不同连接方式的记录（简单记录，太详细会浪费大量时间）</em></strong></p><a id="more"></a><hr><ul><li><p><strong>内连接，INNER JOIN (也称为SIMPLE JOIN)</strong></p><ul><li>INNER JOIN是最常见的连接类型，它返回连接条件满足的多个表中的所有行。</li><li>位置在FROM之后。</li><li><img src="/images/connect_1.png" alt="内连接"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INNER JOIN database_name  </span><br><span class="line">ON expression</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>左外连接</strong></p><ul><li>LEFT OUTER JOIN用于返回ON条件中指定的左侧表中的所有行，并仅返回满足连接条件的其他表中的行。</li><li><img src="/images/connect_2.png" alt="左外连接"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">columns</span>  </span><br><span class="line"><span class="keyword">FROM</span> table1  </span><br><span class="line"><span class="keyword">LEFT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> table2  </span><br><span class="line"><span class="keyword">ON</span> table1.column = table2.column;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>右外连接</strong></p><ul><li>RIGHT OUTER JOIN用于返回ON条件中指定的右表中的所有行，并且仅返回来自其他表中连接字段满足条件的行。</li><li><img src="/images/connect_3.png" alt="右外连接"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">columns</span>  </span><br><span class="line"><span class="keyword">FROM</span> table1  </span><br><span class="line"><span class="keyword">RIGHT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> table2  </span><br><span class="line"><span class="keyword">ON</span> table1.column = table2.column;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;对mariaDB不同连接方式的记录（简单记录，太详细会浪费大量时间）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>mariaDB聚合函数</title>
    <link href="http://yoursite.com/2020/04/21/method-for-mariadb/"/>
    <id>http://yoursite.com/2020/04/21/method-for-mariadb/</id>
    <published>2020-04-21T07:42:13.000Z</published>
    <updated>2020-04-21T08:21:10.894Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>对mariaDB聚合函数的记录（简单记录，太详细会浪费大量时间）</em></strong></p><a id="more"></a><hr><ul><li><p><strong>Count()函数</strong></p><ul><li>COUNT()函数用于返回表达式的计数/行数，只计算NOT NULL值。</li><li>在COUNT之后的aggregate_expression可以添加DISTINCT防止统计重复数据。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(aggregate_expression)  [<span class="keyword">AS</span> <span class="string">"title"</span>]</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>SUM()函数</strong></p><ul><li>SUM()函数用于返回表达式求和的值。</li><li>可以使用SUM函数的DISTINCT子句来避免重复值的总和。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(aggregate_expression)  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>MIN()函数</strong></p><ul><li>MIN()函数用于检索表达式的最小值。</li><li>可以使用Min函数的GROUP BY子句来分组。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(aggregate_expression)  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>MAX()函数</strong></p><ul><li>MAX()函数用于检索表达式的最大值。</li><li>可以使用MAX函数的GROUP BY子句来分组。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(aggregate_expression)  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>AVG()函数</strong></p><ul><li>Avg()函数用于检索表达式的平均值。</li><li>也可以在AVG()函数使用数学公式。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(aggregate_expression)  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展使用</span></span><br><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n,  </span><br><span class="line"><span class="keyword">AVG</span>(aggregate_expression)  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions]  </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> expression1, expression2, ... expression_n;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;对mariaDB聚合函数的记录（简单记录，太详细会浪费大量时间）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>mariaDB字句</title>
    <link href="http://yoursite.com/2020/04/21/children-for-mariadb/"/>
    <id>http://yoursite.com/2020/04/21/children-for-mariadb/</id>
    <published>2020-04-21T06:25:18.000Z</published>
    <updated>2020-04-21T07:42:29.219Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>对mariaDB字句的记录（简单记录，太详细会浪费大量时间）</em></strong></p><a id="more"></a><hr><ul><li><p><strong>where字句</strong></p><ul><li>WHERE子句是一个可选的子句。它可以和AND，OR，AND &amp; OR，LIKE运算符一起使用，优先级从左至右逐渐降低。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[COMMAND] field,field2,... FROM table_name,table_name2,... WHERE [CONDITION]</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Like字句</strong></p><ul><li>它用于模式匹配并返回true或false，可以和NOT结合使用。用于比较的模式接受以下通配符：<blockquote><p>“%”通配符：匹配字符数(0或更多)。<br>“_”通配符：匹配单个字符。它匹配其集合中的字符。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">field</span>, field2,... <span class="keyword">FROM</span> table_name, table_name2,...  </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">field</span> <span class="keyword">LIKE</span> condition</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>By字句</strong></p><ul><li>ORDER BY子句用于按升序或降序对结果集中的记录进行排序：<blockquote><p>ASC表示升序<br>DESC表示降序<br>可以不使用上面的两个，按照某一个数据进行排序（默认为ASC）<br>可以使用多列排序</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ELECT expressions  </span><br><span class="line">FROM tables  </span><br><span class="line">[WHERE conditions]  </span><br><span class="line">ORDER BY expression [ ASC | DESC ];</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Distinct字句</strong></p><ul><li>DISTINCT子句用于在SELECT语句中从结果中删除重复项。当在DISTINCT子句中仅使用表达式时，查询将返回该表达式的唯一值。当您使用多个表达式在DISTINCT子句时，查询将返回多个表达式的唯一组合。DISTINCT子句不会忽略NULL值。因此，在SQL语句中使用DISTINCT子句时，结果集将包含NULL作为不同的值。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> expressions  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>From子句</strong></p><ul><li>FROM子句用于从表中获取数据，它也被用来连接表。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns_names <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;对mariaDB字句的记录（简单记录，太详细会浪费大量时间）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>mariaDB的CRUD操作</title>
    <link href="http://yoursite.com/2020/04/21/crud-for-mariadb/"/>
    <id>http://yoursite.com/2020/04/21/crud-for-mariadb/</id>
    <published>2020-04-21T05:52:01.000Z</published>
    <updated>2020-04-21T13:03:25.028Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>对mariaDB操作的记录（简单记录，太详细会浪费大量时间）</em></strong></p><a id="more"></a><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><strong>插入数据</strong></p><ul><li><p>语法1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename (<span class="keyword">field</span>,field2,...) <span class="keyword">VALUES</span> (<span class="keyword">value</span>, value2,...);</span><br></pre></td></tr></table></figure></li><li><p>语法2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span>  </span><br><span class="line">(column1, column2, ... )  </span><br><span class="line"><span class="keyword">VALUES</span>  </span><br><span class="line">(expression1, expression2, ... ),  </span><br><span class="line">(expression1, expression2, ... ),  </span><br><span class="line">...;</span><br></pre></td></tr></table></figure></li><li><p>语法3：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span>  </span><br><span class="line">(column1, column2, ... )  </span><br><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ...  </span><br><span class="line"><span class="keyword">FROM</span> source_table  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>查询数据</strong></p><ul><li>基础语法<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> expressions  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure></li><li>扩展语法<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [ <span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span> ]  </span><br><span class="line">expressions  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions]  </span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> expressions]  </span><br><span class="line">[<span class="keyword">HAVING</span> condition]  </span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> expression [ <span class="keyword">ASC</span> | <span class="keyword">DESC</span> ]];<span class="comment"># ASC为升序排列，DESC为降序排列</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>限制返回记录</strong></p><ul><li>使用SELECT语句和LIMIT子句从表中检索一个或多个记录  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> expressions  </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions]  </span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> expression [ <span class="keyword">ASC</span> | <span class="keyword">DESC</span> ]]  </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="keyword">row_count</span>;<span class="comment"># start_row,row_count用于分页</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>更新数据</strong></p><ul><li>改变一个数据中的某一个值<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">table</span>  </span><br><span class="line"><span class="keyword">SET</span> column1 = expression1,  </span><br><span class="line">    column2 = expression2,  </span><br><span class="line">    ...  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions]  </span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> expression [ <span class="keyword">ASC</span> | <span class="keyword">DESC</span> ]]  </span><br><span class="line">[<span class="keyword">LIMIT</span> number_rows];</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>删除数据</strong></p><ul><li>DELETE语句用于从MariaDB数据库的表中删除一个或多个记录。  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">table</span>  </span><br><span class="line">[<span class="keyword">WHERE</span> conditions <span class="keyword">AND</span>/<span class="keyword">OR</span> other_conditions]  </span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> expression [ <span class="keyword">ASC</span> | <span class="keyword">DESC</span> ]]  </span><br><span class="line">[<span class="keyword">LIMIT</span> number_rows];</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>TRUNCATE截断表</strong></p><ul><li>TRUNCATE TABLE语句用于从表中删除所有记录。它与没有WHERE子句的DELETE语句相同，使用后该表将被永久删除，无法回滚。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] [database_name.]table_name;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>CRUD操作的条件列表</strong></p><table><thead><tr><th align="center">编号</th><th align="center">条件</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">AND</td><td align="center">在满足2个以上的条件时使用。</td></tr><tr><td align="center">2</td><td align="center">OR</td><td align="center">在满足任何一个条件时使用。</td></tr><tr><td align="center">3</td><td align="center">AND &amp; OR</td><td align="center">当AND＆OR条件满足时使用它。</td></tr><tr><td align="center">4</td><td align="center">LIKE</td><td align="center">在where子句中使用简单的模式匹配(通配符)。</td></tr><tr><td align="center">5</td><td align="center">RLIKE</td><td align="center">在where子句中使用正则表达式匹配。</td></tr><tr><td align="center">6</td><td align="center">IN</td><td align="center">它用作多个OR条件的替代。</td></tr><tr><td align="center">7</td><td align="center">NOT</td><td align="center">它用来否定一个条件。</td></tr><tr><td align="center">8</td><td align="center">IS NULL</td><td align="center">它用于测试一个NULL值。</td></tr><tr><td align="center">9</td><td align="center">IS NOT NULL</td><td align="center">它用来测试一个非NULL值。</td></tr><tr><td align="center">10</td><td align="center">BETWEEN</td><td align="center">它用于在一个范围内(包括)进行检索。</td></tr><tr><td align="center">11</td><td align="center">EXISTS</td><td align="center">它用于指定是否符合条件，然后子查询至少返回一行。</td></tr></tbody></table></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;对mariaDB操作的记录（简单记录，太详细会浪费大量时间）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>mariaDB语法笔记</title>
    <link href="http://yoursite.com/2020/04/20/operation-for-mariadb/"/>
    <id>http://yoursite.com/2020/04/20/operation-for-mariadb/</id>
    <published>2020-04-20T09:25:26.000Z</published>
    <updated>2020-04-21T05:44:32.717Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>对mariaDB操作的记录</em></strong></p><a id="more"></a><hr><ul><li><p><strong>创建数据库</strong></p><ul><li>语法：CREATE DATABASE [数据库名称] </li><li>注意：必须在要有相应权限</li><li>也可以在创建数据库的同时初始化一些数据  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; CREATE DATABASE SCHOOL;</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>选择数据库</strong></p><ul><li>语法：USE [数据库名称]</li><li>代码：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; USE SCHOOL</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [SCHOOL]&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>删除数据库</strong></p><ul><li>语法：DROP DATABASE [数据库名称]</li><li>代码：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show databases</span><br><span class="line">    -&gt; ;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| SCHOOL             |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.001</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [SCHOOL]&gt; <span class="keyword">DROP</span> <span class="keyword">DATABASE</span> SCHOOL;</span><br><span class="line">Query OK, 0 rows affected (0.002 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| Database           |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+<span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>创建表</strong></p><ul><li><p>语法：</p><blockquote><p>CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name<br>(create_definition,…) [table_options    ]… [partition_options]</p></blockquote><blockquote><p>CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name<br>[(create_definition,…)] [table_options   ]… [partition_options]<br>select_statement</p></blockquote><blockquote><p>CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name<br>{ LIKE old_table_name | (LIKE old_table_name) }</p></blockquote><blockquote><p>select_statement:<br>[IGNORE | REPLACE] [AS] SELECT …   (Some legal select statement)</p></blockquote></li><li><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [SCHOOL]&gt; CREATE TABLE students(</span><br><span class="line">    -&gt; student_id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt; student_name VARCHAR(100) NOT NULL,</span><br><span class="line">    -&gt; student_address VARCHAR(40) NOT NULL,</span><br><span class="line">    -&gt; admission_date DATE,</span><br><span class="line">    -&gt; PRIMARY KEY (student_id)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.006 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MariaDB [SCHOOL]&gt; SHOW TABLES;</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| Tables_in_SCHOOL |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| students         |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.001</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MariaDB [SCHOOL]&gt; <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`SCHOOL`</span>.<span class="string">`students`</span>;</span><br><span class="line">+<span class="comment">----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Table    | <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                                                                                                                                                            |</span><br><span class="line">+<span class="comment">----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| students | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`students`</span> (</span><br><span class="line"><span class="string">`student_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="string">`student_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`student_address`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`admission_date`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`student_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_unicode_ci |</span><br><span class="line">+<span class="comment">----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>删除表</strong></p><ul><li>语法：DROP TABLE [表名称];</li><li>代码：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [SCHOOL]&gt; DROP TABLE students;</span><br><span class="line">Query OK, 0 rows affected (0.009 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [SCHOOL]&gt; SHOW TABLES;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">0.000</span> sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>修改表</strong></p><ul><li><p>语法：</p><blockquote><p>添加一列：</p><blockquote><p>ALTER TABLE xxxx ADD COLUMN [IF NOT EXISTS]  (col_name column_definition,…)</p></blockquote></blockquote><blockquote><p>删除一列</p><blockquote><p>ALTER TABLE xxxx DROP COLUMN [IF EXISTS] col_name [CASCADE|RESTRICT]</p></blockquote></blockquote><blockquote><p>MODIFY修改列里面值的类型</p><blockquote><p>ALTER TABLE t1 MODIFY x bigint unsigned;</p></blockquote></blockquote><blockquote><p>CHANGE修改包括列名在内的一切数值</p><blockquote><p>ALTER TABLE t1 CHANGE a b bigint unsigned auto_increment;</p></blockquote></blockquote><blockquote><p>ADD CONSTRAINT添加约束，不满足约束的数据不会被更新：</p><blockquote><p>ALTER TABLE table_name<br>ADD CONSTRAINT [constraint_name] CHECK(expression);</p></blockquote></blockquote><blockquote><p>DROP CONSTRAINT删除约束：</p><blockquote><p>ALTER TABLE table_name<br>DROP CONSTRAINT [constraint_name];</p></blockquote></blockquote><blockquote><p>ENGINE更改存储引擎（会重建表）：</p><blockquote><p>ALTER TABLE xxxx ENGINE = InnoDB;</p></blockquote></blockquote><blockquote><p>重建表</p><blockquote><p>ALTER TABLE t1 FORCE;</p></blockquote></blockquote><blockquote><p>组合使用：</p><blockquote><p>前面几种方法可以进行组合使用，用’,’隔开各个操作</p></blockquote></blockquote></li><li><p>代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [SCHOOL]&gt; CREATE TABLE students(</span><br><span class="line">    -&gt; student_id INT NOT NULL KEY AUTO_INCREMENT,</span><br><span class="line">    -&gt; student_name VARCHAR(100),</span><br><span class="line">    -&gt; student_address VARCHAR(100) NOT NULL</span><br><span class="line">    -&gt; );</span><br><span class="line"><span class="comment">#添加一行</span></span><br><span class="line">MariaDB [SCHOOL]&gt; ALTER TABLE students ADD COLUMN (student_age INT NOT NULL);</span><br><span class="line"><span class="comment"># 删除一行</span></span><br><span class="line">MariaDB [SCHOOL]&gt; ALTER TABLE students DROP COLUMN student_age;</span><br><span class="line"><span class="comment"># 改变一列除了列名以外的所有数据</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">MODIFY</span> student_age <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT;</span><br><span class="line"><span class="comment"># 改变一列的所有数据</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">CHANGE</span> student_age student_Age <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT;</span><br><span class="line"><span class="comment"># 添加约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> is_balanced </span><br><span class="line">    <span class="keyword">CHECK</span>((student_id + student_Age) &gt; <span class="number">0</span>);</span><br><span class="line"><span class="comment"># 删除约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> is_balanced;</span><br><span class="line"><span class="comment"># 组合用法</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">DROP</span> x, <span class="keyword">ADD</span> x2 <span class="built_in">INT</span>,  <span class="keyword">CHANGE</span> y y2 <span class="built_in">INT</span>;</span><br><span class="line"><span class="comment"># 更改存储引擎</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line"><span class="comment"># 重建表</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">FORCE</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;对mariaDB操作的记录&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>mariaDB介绍</title>
    <link href="http://yoursite.com/2020/04/20/word-for-mariadb/"/>
    <id>http://yoursite.com/2020/04/20/word-for-mariadb/</id>
    <published>2020-04-20T08:59:23.000Z</published>
    <updated>2020-04-21T16:18:25.587Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong><em>除了web前端的那些琐碎知识点，mysql语法也属于许久不用就会遗忘的东西，距离上次学习mariaDB语法已有一年之久，相关知识真的是忘得一干二净，所以直接记录一下等以后忘了再看一下就好了</em></strong></p><a id="more"></a><hr><ul><li><p><strong>参考</strong></p><ul><li>部分资料参考自<a href="https://www.yiibai.com/mariadb" target="_blank" rel="noopener">易百教程</a>。</li></ul></li><li><p><strong>安装</strong></p><ul><li>使用的系统为arch Linux，直接在wiki上查询教程。</li><li>当自己创建一个用户时，记得赋予其权利，否则无法正常使用。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'user'</span>@<span class="string">'localhost'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>RDBMS术语</strong></p><ul><li>Database - 数据库是由保存相关数据的表组成的数据源。</li><li>Table -表，这意味着电子表格，是包含数据的矩阵。</li><li>Column - 表示数据元素的列是保存一种类型的数据的结构;例如，送货日期。</li><li>Row - 行是对相关数据进行分组的结构;例如，用于客户的数据。它也被称为元组，条目或记录。</li><li>Redundancy - 此术语指的是存储数据两次，以加速系统。</li><li>Primary Key - 这指的是唯一的标识值。此值不能在表中出现两次，并且只有一个行与其关联。</li><li>Foreign Key - 外键用作两个表之间的链接。</li><li>Compound Key -复合键，或复合键，是指多个列的关键。它指的是多列由于缺乏独特的质量一列。</li><li>Index - 索引实际上与书的索引相同。</li><li>Referential Integrity - 此术语指确保所有外键值指向现有行。</li></ul></li><li><p><strong>MARIA数据库</strong></p><ul><li><p>MariaDB是由MySQL的原始开发人员创建的MySQL的流行分支。 它源于与MySQL收购Oracle有关的问题。 它支持小数据处理任务和企业需求。 它旨在成为MySQL的替代，只需要简单的卸载MySQL和安装MariaDB。 MariaDB提供与MySQL等相同的功能。</p></li><li><p>MariaDB的主要特性</p><ul><li>所有MariaDB都在GPL，LGPL或BSD下。</li><li>MariaDB包括各种存储引擎，包括高性能存储引擎，用于与其他RDBMS数据源一起工作。</li><li>MariaDB使用标准和流行的查询语言。</li><li>MariaDB在多个操作系统上运行，并支持各种各样的编程语言。</li><li>MariaDB提供对PHP的支持，PHP是最流行的Web开发语言之一。</li><li>MariaDB提供Galera集群技术。</li><li>MariaDB还提供了许多在MySQL中不可用的操作和命令，并消除/取代影响性能的功能。</li></ul></li></ul></li><li><p><strong>管理命令</strong></p><ul><li>USE [database name] - 设置当前默认数据库。</li><li>SHOW DATABASES - 列出服务器上当前的数据库。</li><li>SHOW TABLES - 列出所有非临时表。</li><li>SHOW COLUMNS FROM [table name] - 提供与指定表有关的列信息。</li><li>SHOW INDEX FROM TABLENAME [table name] - 提供与指定表相关的表索引信息。</li><li>SHOW TABLE STATUS LIKE [table name] \ G - - 提供有关非临时表的信息的表，以及LIKE子句用于获取表名后显示的模式。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;除了web前端的那些琐碎知识点，mysql语法也属于许久不用就会遗忘的东西，距离上次学习mariaDB语法已有一年之久，相关知识真的是忘得一干二净，所以直接记录一下等以后忘了再看一下就好了&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Python BeautifulSoup 中.text与.string的区别</title>
    <link href="http://yoursite.com/2020/04/18/bs4-diff-bt-text-and-string/"/>
    <id>http://yoursite.com/2020/04/18/bs4-diff-bt-text-and-string/</id>
    <published>2020-04-18T08:24:34.000Z</published>
    <updated>2020-04-18T09:02:07.602Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>在学习编写爬虫的过程中对于bs4库使用中的小记</em></strong></p><a id="more"></a><hr><ul><li><p><strong>二者不同之处</strong></p><blockquote><p>.string对于Tag属性返回一个NavigableString变量，不检索子标签。<br>.text获得所有子子标签字符串并返回使用给定的分隔符连接，.text的返回unicode变量。</p></blockquote></li><li><p><strong>举例</strong></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>some text<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>more text<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>even <span class="tag">&lt;<span class="name">p</span>&gt;</span>more text<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># .string返回None</span><br><span class="line">some text</span><br><span class="line">None</span><br><span class="line">more text</span><br><span class="line">None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># .text返回一个空字符串</span><br><span class="line">some text</span><br><span class="line"></span><br><span class="line">more text</span><br><span class="line">even more text</span><br></pre></td></tr></table></figure></li><li><p><strong>总结</strong></p><ul><li>第一行，在指定标签td，没有子标签，且有文本时，两者的返回结果一致，都是文本</li><li>第二行，在指定标签td，没有子标签，且没有文本时，.string返回None，.text返回为空</li><li>第三行，在指定标签td，只有一个子标签时，且文本只出现在子标签之间时，两者返回结果一致，都返回子标签内的文本</li><li>第四行，最关键的区别，在指定标签td，有子标签，并且父标签td和子标签p各自包含一段文本时，两者的返回结果，存在很大的差异:<blockquote><p>.string返回为空，因为文本数&gt;=2，string不知道获取哪一个<br>.text返回的是，两段文本的拼接。</p></blockquote></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;在学习编写爬虫的过程中对于bs4库使用中的小记&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="BeautifulSoup" scheme="http://yoursite.com/tags/BeautifulSoup/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux安装deb包</title>
    <link href="http://yoursite.com/2020/04/18/install-deb-pkg/"/>
    <id>http://yoursite.com/2020/04/18/install-deb-pkg/</id>
    <published>2020-04-18T08:10:14.000Z</published>
    <updated>2020-04-18T08:24:40.304Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>最近想要使用linux端的百度云，但官网只给出了rpm和deb的安装包，就从网上查询了几种方法</em></strong></p><a id="more"></a><hr><ul><li><p><strong>使用dpkg安装（不推荐）</strong></p><blockquote><p>不推荐原因：arch有自己的pacman，再用其他的包管理会把系统里的依赖关系搞乱</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用yay或yaourt安装dpkg</span></span><br><span class="line">yay -S dpkg</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用dpkg安装deb</span></span><br><span class="line">dpkg -i xxx.deb</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>使用debtap将deb转化为pacman安装包（推荐）</strong></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装bash，binutils，pkgfile，fakeroot和debtap包</span></span><br><span class="line">pacman -S bash binutils pkgfile fakeroot</span><br><span class="line">yay -S debtap</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行以下命令来创建/更新 pkgfile 和 debtap 数据库</span></span><br><span class="line">sudo debtap -u</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用debtap转换deb包</span></span><br><span class="line">debtap xxx.deb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">pacman -U xxx.pkg</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;最近想要使用linux端的百度云，但官网只给出了rpm和deb的安装包，就从网上查询了几种方法&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>Python中的Scrapy库</title>
    <link href="http://yoursite.com/2020/04/15/scrapy-note/"/>
    <id>http://yoursite.com/2020/04/15/scrapy-note/</id>
    <published>2020-04-15T07:49:52.000Z</published>
    <updated>2020-04-17T08:48:24.485Z</updated>
    
    <content type="html"><![CDATA[<p> <strong><em>本笔记内容巨多，请耐心学习</em></strong></p><a id="more"></a><hr><h2 id="Scrapy介绍"><a href="#Scrapy介绍" class="headerlink" title="Scrapy介绍"></a><strong>Scrapy介绍</strong></h2><ul><li><p><strong>简介</strong></p><blockquote><p>Scrapy不是一个函数功能库，而是一个爬虫框架。<br>爬虫框架是实现爬虫功能的一个软件结构和功能组件集合。<br>爬虫框架是一个半成品，能够帮助用户实现专业网络爬虫。</p></blockquote></li><li><p><strong>框架结构</strong></p></li></ul><p><img src="/images/scrapy.png" alt="scrapy 框架"></p><blockquote><p>Spider模块（用户配置）<br>Engine模块（已有实现）<br>Item Pipline模块（用户配置）<br>Downloader模块（已有实现）<br>Scheduler模块（已有实现）</p></blockquote><ul><li><strong>数据流的三个路径</strong><ol><li><strong>路径1</strong><br> <img src="/images/scrapy_1.png" alt="scrapy 路径1"><blockquote><p>1 Engine从Spider处获得爬取请求(Request)<br>2 Engine将爬取请求转发给Scheduler，用于调度</p></blockquote></li><li><strong>路径2</strong><br> <img src="/images/scrapy_2.png" alt="scrapy 路径2"><blockquote><p>3 Engine从Scheduler处获得下一个要爬取的请求<br>4 Engine将爬取请求通过中间件发送给Downloader<br>5 爬取网页后，Downloader形成响应（Response）,通过中间件发给Engine<br>6 Engine将收到的响应通过中间件发送给Spider处理</p></blockquote></li><li><strong>路径3</strong><br> <img src="/images/scrapy_3.png" alt="scrapy 路径3"><blockquote><p>7 Spider处理响应后产生爬取项（scraped Item）和新的爬取请求（Requests）给Engine<br>8 Engine将爬取项发送给Item Pipeline（框架出口）<br>9 Engine将爬取请求发送给Scheduler</p></blockquote></li></ol></li></ul><h2 id="Scrapy框架解析"><a href="#Scrapy框架解析" class="headerlink" title="Scrapy框架解析"></a><strong>Scrapy框架解析</strong></h2><ul><li><p><strong>Engine</strong></p><blockquote><p>(1) 控制所有模块之间的数据流<br>(2) 根据条件触发事件<br>不需要用户修改</p></blockquote></li><li><p><strong>Downloader</strong></p><blockquote><p>根据请求下载网页<br>不需要用户修改</p></blockquote></li><li><p><strong>Scheduler</strong></p><blockquote><p>对所有爬取请求进行调度管理<br>不需要用户修改</p></blockquote></li><li><p><strong>Downloader Middleware</strong></p><blockquote><p>目的：实施Engine、Scheduler和Downloader之间进行用户可配置的控制<br>功能：修改、丢弃、新增请求或响应<br>用户可以编写配置代码,如果不对request和response进行修改就不需要编写</p></blockquote></li><li><p><strong>Spider</strong></p><blockquote><p>(1) 解析Downloader返回的响应（Response）<br>(2) 产生爬取项（scraped item）<br>(3) 产生额外的爬取请求（Request）<br>需要用户编写配置代码</p></blockquote></li><li><p><strong>Item Pipelines</strong></p><blockquote><p>(1) 以流水线方式处理Spider产生的爬取项<br>(2) 由一组操作顺序组成，类似流水线，每个操作是一个Item Pipeline类型<br>(3) 可能操作包括：清理、检验和查重爬取项中的HTML数据、将数据存储到数据库<br>需要用户编写配置代码</p></blockquote></li><li><p><strong>Spider Middleware</strong></p><blockquote><p>目的：对请求和爬取项的再处理<br>功能：修改、丢弃、新增请求或爬取项<br>用户可以编写配置代码</p></blockquote></li></ul><h2 id="requests库和Scrapy爬虫的比较"><a href="#requests库和Scrapy爬虫的比较" class="headerlink" title="requests库和Scrapy爬虫的比较"></a><strong>requests库和Scrapy爬虫的比较</strong></h2><ul><li><p><strong>相同点</strong></p><blockquote><p>两者都可以进行页面请求和爬取，Python爬虫的两个重要技术路线<br>两者可用性都好，文档丰富，入门简单<br>两者都没有处理js、提交表单、应对验证码等功能（可扩展）</p></blockquote></li><li><p><strong>不同点</strong></p><table><thead><tr><th align="center">requests</th><th align="center">Scrapy</th></tr></thead><tbody><tr><td align="center">页面级爬虫</td><td align="center">网站级爬虫</td></tr><tr><td align="center">功能库</td><td align="center">框架</td></tr><tr><td align="center">并发性考虑不足，性能较差</td><td align="center">并发性好，性能较高</td></tr><tr><td align="center">重点在于页面下载</td><td align="center">重点在于爬虫结构</td></tr><tr><td align="center">定制灵活</td><td align="center">一般定制灵活，深度定制困难</td></tr><tr><td align="center">上手十分简单</td><td align="center">入门稍难</td></tr></tbody></table></li><li><p><strong>看情况挑选</strong></p><blockquote><p>非常小的需求，requests库<br>不太小的需求，Scrapy框架<br>定制程度很高的需求（不考虑规模），自搭框架，requests &gt; Scrapy</p></blockquote></li></ul><h2 id="Scrapy爬虫的常用命令"><a href="#Scrapy爬虫的常用命令" class="headerlink" title="Scrapy爬虫的常用命令"></a><strong>Scrapy爬虫的常用命令</strong></h2><ul><li><p><strong>格式</strong></p><blockquote><p>scrapy <command> [options] [args]</p></blockquote></li><li><p><strong>常用命令</strong></p><table><thead><tr><th align="center">命令</th><th align="center">说明</th><th align="center">格式</th></tr></thead><tbody><tr><td align="center">startproject</td><td align="center">创建一个新工程</td><td align="center">scrapy startproject &lt;name&gt; [dir]</td></tr><tr><td align="center">genspider</td><td align="center">创建一个爬虫</td><td align="center">scrapy genspider [options] &lt;name&gt; &lt;domain&gt;</td></tr><tr><td align="center">settings</td><td align="center">获得爬虫配置信息</td><td align="center">scrapy settings [options]</td></tr><tr><td align="center">crawl</td><td align="center">运行一个爬虫</td><td align="center">scrapy crawl &lt;spider&gt;</td></tr><tr><td align="center">list</td><td align="center">列出工程中所有爬虫</td><td align="center">scrapy list</td></tr><tr><td align="center">shell</td><td align="center">启动URL调试命令行</td><td align="center">scrapy shell [url]</td></tr></tbody></table></li><li><p><strong>简单实例</strong></p><ul><li><p><strong>步骤1</strong>：建立一个Scrapy爬虫工程</p><blockquote><p>scrapy startporject python123demo</p></blockquote></li><li><p>生成的目录结构</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python123demo&#x2F;                  外层目录</span><br><span class="line">    scrapy.cfg                  部署Scrapy爬虫的配置文件</span><br><span class="line">    python123demo&#x2F;              Scrapy框架的用户自定义Python代码</span><br><span class="line">        __init__.py             初始化脚本</span><br><span class="line">        items.py                Items代码模板（继承类）</span><br><span class="line">        middlewares.py          Middlewares代码模板（继承类）</span><br><span class="line">        pipelines.py            Pipelines代码模板（继承类）</span><br><span class="line">        settings.py             Scrapy爬虫的配置文件</span><br><span class="line">        __pycache__&#x2F;            缓存目录，无需修改</span><br><span class="line">        spiders&#x2F;                Spiders代码模板目录（继承类）</span><br><span class="line">            __init__.py         初始文件，无需修改</span><br><span class="line">            __pycache__&#x2F;        缓存目录，无需修改</span><br></pre></td></tr></table></figure></li><li><p><strong>步骤2</strong>：在工程中产生一个Scrapy爬虫（也可以手动创建）</p><blockquote><p>scrapy genspider demo python123.io</p><blockquote><p>作用：</p><blockquote><p>(1) 生成一个名称为demo的spider<br>(2) 在spiders目录下增加代码文件 demo.py</p></blockquote></blockquote></blockquote></li><li><p><strong>步骤3</strong>：配置产生的spider爬虫</p><blockquote><p>（1）初始URL地址<br>（2）获取页面后的解析方式</p></blockquote></li><li><p>配置完成的 demo.py</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 演示HTML页面地址：http://python123.io/ws/demo.html</span></span><br><span class="line"><span class="comment"># 文件名称：demo.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"demo"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对原来的demo.py进行了优化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        urls = [<span class="string">'http://python123.io/ws/demo.html'</span>]</span><br><span class="line">        <span class="comment">#allowed_domains = ["python123.io"]</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            <span class="comment"># 原本程序中不用写Requests方法</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># parse()用于处理响应，解析内容形成字典，发现新的URL爬取请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        fname = response.url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">with</span> open(fname, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(<span class="string">'Saved file %s.'</span> % name)</span><br></pre></td></tr></table></figure></li><li><p><strong>步骤4</strong>：运行爬虫，获取网页,demo爬虫被执行，捕获页面存储在demo.html</p><blockquote><p>scrapy crawl demo</p></blockquote></li></ul></li></ul><h2 id="Scrapy爬虫的基本使用"><a href="#Scrapy爬虫的基本使用" class="headerlink" title="Scrapy爬虫的基本使用"></a><strong>Scrapy爬虫的基本使用</strong></h2><ul><li><p><strong>使用步骤</strong></p><blockquote><p>步骤1：创建一个工程和Spider模板<br>步骤2：编写Spider<br>步骤3：编写Item Pipeline<br>步骤4：优化配置策略</p></blockquote></li><li><p><strong>数据类型</strong></p><ul><li><p><strong>Request类</strong></p><blockquote><p>scrapy.http.Request()<br>Request对象表示一个HTTP请求<br>由Spider生成，由Downloader执行</p></blockquote><table><thead><tr><th align="center">属性或方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.url</td><td align="center">Request对应的请求URL地址</td></tr><tr><td align="center">.method</td><td align="center">对应的请求方法，’GET’ ‘POST’等</td></tr><tr><td align="center">.headers</td><td align="center">字典类型风格的请求头</td></tr><tr><td align="center">.body</td><td align="center">请求内容主体，字符串类型</td></tr><tr><td align="center">.meta</td><td align="center">用户添加的扩展信息，在Scrapy内部模块间传递信息使用</td></tr><tr><td align="center">.copy()</td><td align="center">复制该请求</td></tr></tbody></table></li><li><p><strong>Response类</strong></p><blockquote><p>scrapy.http.Response()<br>Response对象表示一个HTTP响应<br>由Downloader生成，由Spider处理</p></blockquote><table><thead><tr><th align="center">属性或方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.url</td><td align="center">Response对应的URL地址</td></tr><tr><td align="center">.status</td><td align="center">HTTP状态码，默认是200</td></tr><tr><td align="center">.headers</td><td align="center">Response对应的头部信息</td></tr><tr><td align="center">.body</td><td align="center">Response对应的内容信息，字符串类型</td></tr><tr><td align="center">.flags</td><td align="center">一组标记</td></tr><tr><td align="center">.request</td><td align="center">产生Response类型对应的Request对象</td></tr><tr><td align="center">.copy()</td><td align="center">复制该响应</td></tr></tbody></table></li><li><p><strong>Item类</strong></p><blockquote><p>scrapy.item.Item()<br>Item对象表示一个从HTML页面中提取的信息内容<br>由Spider生成，由Item Pipeline处理<br>Item类似字典类型，可以按照字典类型操作</p></blockquote></li><li><p><strong>Scrapy爬虫信息的提取方法</strong></p><blockquote><p>Scrapy爬虫支持多种HTML信息提取方法：</p><blockquote><p>Beautiful Soup<br>lxml<br>re<br>XPath Selector<br>CSS Selector</p></blockquote></blockquote></li><li><p><strong>补充：CSS Selector的基本使用</strong></p><blockquote><p>&lt;HTML&gt;.css(‘a::attr(href)’).extract()<br>CSS Selector由W3C组织维护并规范</p></blockquote></li></ul></li></ul><h2 id="股票数据Scrapy爬虫实例"><a href="#股票数据Scrapy爬虫实例" class="headerlink" title="股票数据Scrapy爬虫实例"></a><strong>股票数据Scrapy爬虫实例</strong></h2><ul><li><p><strong>功能描述</strong></p><blockquote><p>目标：获取上交所和深交所所有股票的名称和交易信息<br>输出：保存到文件中<br>技术路线：scrapy</p></blockquote></li><li><p><strong>相关数据网站</strong></p><blockquote><p>东方财富网：<a href="http://quote.eastmoney.com/stocklist.html" target="_blank" rel="noopener">http://quote.eastmoney.com/stocklist.html</a><br>百度股票：<a href="https://gupiao.baidu.com/stock/" target="_blank" rel="noopener">https://gupiao.baidu.com/stock/</a><br>单个股票：<a href="https://gupiao.baidu.com/stock/sz002439.html" target="_blank" rel="noopener">https://gupiao.baidu.com/stock/sz002439.html</a></p></blockquote></li><li><p><strong>程序编写步骤</strong></p><ul><li><p><strong>步骤1</strong>：建立工程和Spider模板</p><blockquote><p>&gt;scrapy startproject BaiduStocks<br>&gt;cd BaiduStocks<br>&gt;scrapy genspider stocks baidu.com<br>进一步修改spiders/stocks.py文件</p></blockquote></li><li><p><strong>步骤2</strong>：编写Spider</p><blockquote><p>配置stocks.py文件<br>修改对返回页面的处理<br>修改对新增URL爬取请求的处理</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改前的初始代码</span></span><br><span class="line">-*- coding: utf<span class="number">-8</span> -*-</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DtocksSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'stocks'</span></span><br><span class="line">    allowed_domains = [<span class="string">'baidu.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://baidu.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改后的代码</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StocksSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"stocks"</span></span><br><span class="line">    start_urls = [<span class="string">'http://quote.eastmoney.com/stocklist.html'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'a::attr(href)'</span>).extract():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                stock = re.findall(<span class="string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="number">0</span>]</span><br><span class="line">                url = <span class="string">'http://gupiao.baidu.com/stock/'</span> + stock + <span class="string">'.html'</span></span><br><span class="line">                <span class="keyword">yield</span> scrapy.Request(url, callback=self.parse_stock)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_stock</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        infoDict = &#123;&#125;</span><br><span class="line">        stockInfo = response.css(<span class="string">'.stock-bets'</span>)</span><br><span class="line">        name = stockInfo.css(<span class="string">'.bets-name'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        keyList = stockInfo.css(<span class="string">'dt'</span>).extract()</span><br><span class="line">        valueList = stockInfo.css(<span class="string">'dd'</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(keyList)):</span><br><span class="line">            key = re.findall(<span class="string">r'&gt;.*&lt;/dt&gt;'</span>, keyList[i])[<span class="number">0</span>][<span class="number">1</span>:<span class="number">-5</span>]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                val = re.findall(<span class="string">r'\d+\.?.*&lt;/dd&gt;'</span>, valueList[i])[<span class="number">0</span>][<span class="number">0</span>:<span class="number">-5</span>]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                val = <span class="string">'--'</span></span><br><span class="line">            infoDict[key]=val</span><br><span class="line"></span><br><span class="line">        infoDict.update(</span><br><span class="line">            &#123;<span class="string">'股票名称'</span>: re.findall(<span class="string">'\s.*\('</span>,name)[<span class="number">0</span>].split()[<span class="number">0</span>] + \</span><br><span class="line">            re.findall(<span class="string">'\&gt;.*\&lt;'</span>, name)[<span class="number">0</span>][<span class="number">1</span>:<span class="number">-1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发送给piplines</span></span><br><span class="line">        <span class="keyword">yield</span> infoDict</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>步骤3</strong>：编写ITEM Pipelines</p><blockquote><p>配置pipelines.py文件<br>定义对爬取项（Scraped Item）的处理类<br>配置ITEM_PIPELINES选项(setting.py)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GNU nano <span class="number">4.9</span><span class="number">.2</span>                      pipelines.py                              </span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaidustocksPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增的pipline</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaidustocksInfoPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.f = open(<span class="string">'BaidustocksInfo.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.f.close()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            line = str(dict(item)) + <span class="string">"\n"</span></span><br><span class="line">            self.f.write(line)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setting.py</span></span><br><span class="line"><span class="comment"># Configure item pipelines</span></span><br><span class="line"><span class="comment"># See https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'BaiduStocks.pipelines.BaidustocksInfoPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>步骤4</strong>：程序的执行</p><blockquote><p>&gt;scrapy crawl stocks</p></blockquote></li></ul></li><li><p><strong>优化：在setting.py文件中配置并发链接选项</strong></p><table><thead><tr><th align="center">选项</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">CONCURRENT_REQUESTS</td><td align="center">Downloader最大并发请求下载数量，默认32</td></tr><tr><td align="center">CONCURRENT_ITEMS</td><td align="center">Item Pipeline最大并发ITEM处理数量，默认100</td></tr><tr><td align="center">CONCURRENT_REQUESTS_PER_DOMAIN</td><td align="center">每个目标域名最大的并发请求数量，默认8</td></tr><tr><td align="center">CONCURRENT_REQUESTS_PER_IP</td><td align="center">每个目标IP最大的并发请求数量，默认0，非0有效</td></tr></tbody></table></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;&lt;em&gt;本笔记内容巨多，请耐心学习&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Crawler" scheme="http://yoursite.com/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>股票爬虫实例</title>
    <link href="http://yoursite.com/2020/04/15/stock-example/"/>
    <id>http://yoursite.com/2020/04/15/stock-example/</id>
    <published>2020-04-14T16:30:53.000Z</published>
    <updated>2020-04-17T08:51:10.156Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>股票爬虫实例</em></strong></p><a id="more"></a><hr><ul><li><p><strong>功能描述</strong></p><ul><li>目标：获取上交所和深交所所有股票的名称和交易信息</li><li>输出：保存到文件中</li><li>技术路线：<blockquote><p>requests<br>bs4<br>re</p></blockquote></li></ul></li><li><p><strong>候选数据网站的选择</strong></p><blockquote><p>新浪股票：<a href="http://finance.sina.com.cn/stock/" target="_blank" rel="noopener">http://finance.sina.com.cn/stock/</a><br>百度股票：<a href="https://gupiao.baidu.com/stock/" target="_blank" rel="noopener">https://gupiao.baidu.com/stock/</a></p></blockquote><ul><li>选取原则：股票信息静态存在于HTML页面中，非js代码生成,没有Robots协议限制</li><li>选取方法：浏览器 F12，源代码查看等</li><li>选取心态：不要纠结于某个网站，多找信息源尝试</li></ul></li><li><p><strong>数据网站的确定</strong></p><ul><li>获取股票列表：<blockquote><p>东方财富网：<a href="http://quote.eastmoney.com/stocklist.html" target="_blank" rel="noopener">http://quote.eastmoney.com/stocklist.html</a></p></blockquote></li><li>获取个股信息：<blockquote><p>百度股票：<a href="https://gupiao.baidu.com/stock/" target="_blank" rel="noopener">https://gupiao.baidu.com/stock/</a><br>单个股票：<a href="https://gupiao.baidu.com/stock/sz002439.html" target="_blank" rel="noopener">https://gupiao.baidu.com/stock/sz002439.html</a></p></blockquote></li></ul></li><li><p><strong>程序的结构设计</strong></p><blockquote><p>步骤1：从东方财富网获取股票列表<br>步骤2：根据股票列表逐个到百度股票获取个股信息<br>步骤3：将结果存储到文件</p></blockquote></li><li><p><strong>程序代码（已经优化）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认设置为utf-8编码，使用apparent_encoding会花费更多时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url, code=<span class="string">"utf-8"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = code</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockList</span><span class="params">(lst, stockURL)</span>:</span></span><br><span class="line">    html = getHTMLText(stockURL, <span class="string">"GB2312"</span>)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>) </span><br><span class="line">    a = soup.find_all(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            href = i.attrs[<span class="string">'href'</span>]</span><br><span class="line">            lst.append(re.findall(<span class="string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加动态速度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockInfo</span><span class="params">(lst, stockURL, fpath)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> lst:</span><br><span class="line">        url = stockURL + stock + <span class="string">".html"</span></span><br><span class="line">        html = getHTMLText(url)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> html==<span class="string">""</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            infoDict = &#123;&#125;</span><br><span class="line">            soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">            stockInfo = soup.find(<span class="string">'div'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'stock-bets'</span>&#125;)</span><br><span class="line"></span><br><span class="line">            name = stockInfo.find_all(attrs=&#123;<span class="string">'class'</span>:<span class="string">'bets-name'</span>&#125;)[<span class="number">0</span>]</span><br><span class="line">            infoDict.update(&#123;<span class="string">'股票名称'</span>: name.text.split()[<span class="number">0</span>]&#125;)</span><br><span class="line">            </span><br><span class="line">            keyList = stockInfo.find_all(<span class="string">'dt'</span>)</span><br><span class="line">            valueList = stockInfo.find_all(<span class="string">'dd'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(keyList)):</span><br><span class="line">                key = keyList[i].text</span><br><span class="line">                val = valueList[i].text</span><br><span class="line">                infoDict[key] = val</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">with</span> open(fpath, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write( str(infoDict) + <span class="string">'\n'</span> )</span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">                print(<span class="string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)),end=<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            count = count + <span class="number">1</span></span><br><span class="line">            print(<span class="string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)),end=<span class="string">""</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    stock_list_url = <span class="string">'http://quote.eastmoney.com/stocklist.html'</span></span><br><span class="line">    stock_info_url = <span class="string">'http://gupiao.baidu.com/stock/'</span></span><br><span class="line">    output_file = <span class="string">'D:/BaiduStockInfo.txt'</span></span><br><span class="line">    slist=[]</span><br><span class="line">    getStockList(slist, stock_list_url)</span><br><span class="line">    getStockInfo(slist, stock_info_url, output_file)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;股票爬虫实例&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Crawler" scheme="http://yoursite.com/tags/Crawler/"/>
    
      <category term="Example" scheme="http://yoursite.com/tags/Example/"/>
    
  </entry>
  
  <entry>
    <title>淘宝爬虫实例</title>
    <link href="http://yoursite.com/2020/04/14/tb-example/"/>
    <id>http://yoursite.com/2020/04/14/tb-example/</id>
    <published>2020-04-14T07:32:57.000Z</published>
    <updated>2020-04-17T08:51:13.569Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>淘宝爬虫实例</em></strong></p><a id="more"></a><hr><ul><li><p><strong>功能描述</strong></p><ul><li>目标：获取淘宝搜索页面的信息，提取其中的商品名称和价格</li><li>理解：<blockquote><p>淘宝的搜索接口<br>翻页的处理</p></blockquote></li><li>技术路线：<blockquote><p>requests<br>bs4<br>re</p></blockquote></li></ul></li><li><p><strong>搜索接口和翻页的URL对应属性</strong></p><ul><li>书包链接（每页44个商品）<blockquote><p>起始页：<a href="https://s.taobao.com/search?q=书包&amp;js=1&amp;stats_click=search_radio_all%3A1&amp;initiative_id=staobaoz_20170105&amp;ie=utf8" target="_blank" rel="noopener">https://s.taobao.com/search?q=书包&amp;js=1&amp;stats_click=search_radio_all%3A1&amp;initiative_id=staobaoz_20170105&amp;ie=utf8</a><br>第二页：<a href="https://s.taobao.com/search?q=书包&amp;js=1&amp;stats_click=search_radio_all%3A1&amp;initiative_id=staobaoz_20170105&amp;ie=utf8&amp;bcoffset=0&amp;ntoffset=0&amp;p4ppushleft=1%2C48&amp;s=44" target="_blank" rel="noopener">https://s.taobao.com/search?q=书包&amp;js=1&amp;stats_click=search_radio_all%3A1&amp;initiative_id=staobaoz_20170105&amp;ie=utf8&amp;bcoffset=0&amp;ntoffset=0&amp;p4ppushleft=1%2C48&amp;s=44</a><br>第三页：<a href="https://s.taobao.com/search?q=书包&amp;js=1&amp;stats_click=search_radio_all%3A1&amp;initiative_id=staobaoz_20170105&amp;ie=utf8&amp;bcoffset=-3&amp;ntoffset=-3&amp;p4ppushleft=1%2C48&amp;s=88" target="_blank" rel="noopener">https://s.taobao.com/search?q=书包&amp;js=1&amp;stats_click=search_radio_all%3A1&amp;initiative_id=staobaoz_20170105&amp;ie=utf8&amp;bcoffset=-3&amp;ntoffset=-3&amp;p4ppushleft=1%2C48&amp;s=88</a></p></blockquote></li></ul></li><li><p><strong>注意</strong></p><ul><li>打开淘宝网的robots.txt  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;</span><br></pre></td></tr></table></figure></li><li>仅探讨技术实现，请不要不加限制的爬取该网站</li></ul></li><li><p><strong>程序的结构设计</strong></p><blockquote><p>步骤1：提交商品搜索请求，循环获取页面<br>步骤2：对于每个页面，提取商品名称和价格信息<br>步骤3：将信息输出到屏幕上</p></blockquote></li><li><p><strong>程序代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"Error"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePage</span><span class="params">(ilt, html)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plt = re.findall(<span class="string">r'\"view_price\"\:\"[\d\.]*\"'</span>,html)</span><br><span class="line">        tlt = re.findall(<span class="string">r'\"raw_title\"\:\".*?\"'</span>,html)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plt))):</span><br><span class="line">            <span class="comment"># eval()用于去除引号</span></span><br><span class="line">            price = eval(plt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            title = eval(tlt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            ilt.append([price, title])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"Error2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printGoodsList</span><span class="params">(ilt)</span>:</span></span><br><span class="line">    tplt = <span class="string">"&#123;:4&#125;\t&#123;:8&#125;\t&#123;:16&#125;"</span></span><br><span class="line">    print(tplt.format(<span class="string">"序号"</span>, <span class="string">"价格"</span>, <span class="string">"商品名称"</span>))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> ilt:</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        print(tplt.format(count, g[<span class="number">0</span>], g[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    goods = <span class="string">'书包'</span></span><br><span class="line">    depth = <span class="number">2</span></span><br><span class="line">    start_url = <span class="string">'https://s.taobao.com/search?q='</span>+goods</span><br><span class="line">    infoList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(depth):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = start_url + <span class="string">'&amp;s='</span> + str(<span class="number">44</span>*i)</span><br><span class="line">            html = getHTMLText(url)</span><br><span class="line">            parsePage(infoList, html)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    printGoodsList(infoList)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;淘宝爬虫实例&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Crawler" scheme="http://yoursite.com/tags/Crawler/"/>
    
      <category term="Example" scheme="http://yoursite.com/tags/Example/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式Re库</title>
    <link href="http://yoursite.com/2020/04/13/re-note/"/>
    <id>http://yoursite.com/2020/04/13/re-note/</id>
    <published>2020-04-13T09:48:44.000Z</published>
    <updated>2020-04-17T08:50:41.966Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Re库笔记。</em></strong></p><a id="more"></a><hr><h2 id="正则表达式（regular-expression-regex）"><a href="#正则表达式（regular-expression-regex）" class="headerlink" title="正则表达式（regular expression regex）"></a><strong>正则表达式（regular expression regex）</strong></h2><ul><li><p><strong>概念</strong></p><blockquote><p>通用的字符串表达框架<br>简介表达一组字符串的表达式<br>针对字符串表达“简洁”和“特征”思想的工具<br>判断某字符串的特征归属</p></blockquote></li><li><p><strong>作用</strong></p><blockquote><p>表达文本类型的特征（病毒、入侵等）<br>同事查找或替换一组字符串<br>匹配字符串的全部或部分</p></blockquote></li><li><p><strong>使用</strong></p><blockquote><p>编译：将符合正则表达式语法的字符串转换成正则表达式特征。</p></blockquote></li></ul><h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a><strong>正则表达式语法</strong></h2><table><thead><tr><th align="center">操作符</th><th align="center">说明</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">表示任何单个字符，不能匹配换行符</td><td align="center"></td></tr><tr><td align="center">[ ]</td><td align="center">字符集，对单个字符给出取值范围，不包含空集</td><td align="center">[abc]表示a、b、c，[a-z]表示a到z单个字符</td></tr><tr><td align="center">[^ ]</td><td align="center">非字符集，对单个字符给出取值范围</td><td align="center">[^abc]表示非a或b或c的单个字符</td></tr><tr><td align="center">*</td><td align="center">前一个字符0次或无限次扩展，加在后面</td><td align="center">abc*表示ab、abc、abcc、abccc等</td></tr><tr><td align="center">+</td><td align="center">前一个字符1次或无限次扩展，加在后面</td><td align="center">abc+表示abc、abcc、abccc等</td></tr><tr><td align="center">?</td><td align="center">前一个字符0次或1次扩展，加在后面</td><td align="center">abc?表示ab、abc</td></tr><tr><td align="center">|</td><td align="center">左右表达式任意一个，包含空集</td><td align="center">abc|def表示abc、def</td></tr><tr><td align="center">{m}</td><td align="center">扩展前一个字符m次</td><td align="center">as{2}c表示abbc</td></tr><tr><td align="center">{m,n}</td><td align="center">扩展前一个字符m至n次</td><td align="center">ab{1,2}c表示abc、abbc</td></tr><tr><td align="center">^</td><td align="center">匹配字符串开头，加在前面</td><td align="center">^abc表示abc且在一个字符串的开头</td></tr><tr><td align="center">$</td><td align="center">匹配字符串结尾，加在后面</td><td align="center">abc$表示abc且在一个字符串的结尾</td></tr><tr><td align="center">( )</td><td align="center">分组标记，内部只能使用 | 操作符</td><td align="center">(abc)表示abc，(abc|def)表示abc、def</td></tr><tr><td align="center">\d</td><td align="center">数字，等价于[0-9]</td><td align="center"></td></tr><tr><td align="center">\w</td><td align="center">单词字符，等价于[A-Za-z0-9_]</td><td align="center"></td></tr></tbody></table><ul><li><p><strong>实例</strong></p><table><thead><tr><th align="center">正则表达式</th><th align="center">对应字符串</th></tr></thead><tbody><tr><td align="center">P(Y|YT|YTH|YTHO)N</td><td align="center">‘PN’、’PYN’、’PYTN’、’PYTHN’、’PYTHON’</td></tr><tr><td align="center">PYTHON+</td><td align="center">‘PYTHON’、’PYTHONN’、’PYTHONNN’…</td></tr><tr><td align="center">PY[TH]ON</td><td align="center">‘PYTON’、’PYHON’</td></tr><tr><td align="center">PY[^TH]?ON</td><td align="center">‘PYON’、’PYaON’、’PYbON’、’PYcON’…</td></tr><tr><td align="center">PY{:3}N</td><td align="center">‘PN’、’PYN’、’PYYN’、’PYYYN’</td></tr><tr><td align="center">^[A‐-Za-z]+$</td><td align="center">由26个字母组成的字符串</td></tr><tr><td align="center">^[A‐-Za-z0-9]+$</td><td align="center">由26个字母和数字组成的字符串</td></tr><tr><td align="center">^‐?\d+$</td><td align="center">整数形式的字符串</td></tr><tr><td align="center">^[0-9]*[1-9][0-9]*$</td><td align="center">正整数形式的字符串</td></tr><tr><td align="center">[1-9]\d{5}</td><td align="center">中国境内邮政编码，6位</td></tr><tr><td align="center">[\u4e00-\u9fa5]</td><td align="center">匹配中文字符</td></tr><tr><td align="center">\d{3}-\d{8}|\d{4}-\d{7}</td><td align="center">国内电话号码，010‐68913536</td></tr></tbody></table></li><li><p><strong>IP地址匹配</strong></p><ol><li>IP地址字符串形式的正则表达式（IP地址分4段，每段0‐255）</li><li>精确写法<blockquote><p>0-99： [1-9]?\d<br>100‐199: 1\d{2}<br>200‐249: 2[0-4]\d<br>250‐255: 25[0-5]</p></blockquote></li><li>答案<blockquote><p>(([1-9]?\d|1\d{2}|2[0-4]\d|25[0-5]).){3}([1-9]?\d|1\d{2}|2[0-4]\d|25[0-5])</p></blockquote></li></ol></li></ul><h2 id="Re库的基本使用"><a href="#Re库的基本使用" class="headerlink" title="Re库的基本使用"></a><strong>Re库的基本使用</strong></h2><ul><li><p><strong>正则表达式表示类型</strong></p><blockquote><p>raw string类型(原生字符串类型 r’text’)。<br>string类型，更繁琐。<br>当正则表达式包含转义字符时，使用raw string。</p></blockquote></li><li><p><strong>Re库的主要功能函数</strong></p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">re.search()</td><td align="center">在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td></tr><tr><td align="center">re.match()</td><td align="center">从一个字符串的开始位置起匹配正则表达式，返回match对象</td></tr><tr><td align="center">re.findall()</td><td align="center">搜索字符串，以列表类型返回全部能匹配的子串</td></tr><tr><td align="center">re.split()</td><td align="center">将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td align="center">re.finditer()</td><td align="center">搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</td></tr><tr><td align="center">re.sub()</td><td align="center">在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table></li></ul><ol><li><p><strong>re.search(pattern, string, flags=0)</strong></p><ul><li><p>在一个字符串中搜索匹配正则表达式的第一个位置返回match对象。</p><blockquote><p>pattern : 正则表达式的字符串或原生字符串表示<br>string : 待匹配字符串<br>flags : 正则表达式使用时的控制标记</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.search(<span class="string">r'[]1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT 100081'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> match:</span><br><span class="line"><span class="meta">... </span>    print(match.group(<span class="number">0</span>))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">100081</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>re.match(pattern, string, flags=0)</strong></p><ul><li>从一个字符串的开始位置起匹配正则表达式返回match对象。<blockquote><p>pattern : 正则表达式的字符串或原生字符串表示<br>string : 待匹配字符串<br>flags : 正则表达式使用时的控制标记</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.match(<span class="string">r'[]1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT 100081'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> match:</span><br><span class="line"><span class="meta">... </span>    print(match.group(<span class="number">0</span>))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match.group(<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.match(<span class="string">r'[]1-9]\d&#123;5&#125;'</span>, <span class="string">'100081 BIT'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> match:</span><br><span class="line"><span class="meta">... </span>    print(match.group(<span class="number">0</span>))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">100081</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>re.findall(pattern, string, flags=0)</strong></p><ul><li>搜索字符串，以列表类型返回全部能匹配的子串。<blockquote><p>pattern : 正则表达式的字符串或原生字符串表示<br>string : 待匹配字符串<br>flags : 正则表达式使用时的控制标记</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = re.findall(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT100081 TSU100084'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">'100081'</span>, <span class="string">'100084'</span>]</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>re.split(pattern, string, maxsplit=0, flags=0)</strong></p><ul><li>将一个字符串按照正则表达式匹配结果进行分割返回列表类型，去除匹配的部分。<blockquote><p>pattern : 正则表达式的字符串或原生字符串表示<br>string : 待匹配字符串<br>maxsplit: 最大分割数，剩余部分作为最后一个元素输出，不进行匹配<br>flags : 正则表达式使用时的控制标记</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT100081 TSU100084'</span>)</span><br><span class="line">[<span class="string">'BIT'</span>, <span class="string">' TSU'</span>, <span class="string">''</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT100081 TSU100084'</span>, maxsplit=<span class="number">1</span>)</span><br><span class="line">[<span class="string">'BIT'</span>, <span class="string">' TSU100084'</span>]</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>re.finditer(pattern, string, flags=0)</strong></p><ul><li>搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象。<blockquote><p>pattern : 正则表达式的字符串或原生字符串表示<br>string : 待匹配字符串<br>flags : 正则表达式使用时的控制标记</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT100081 TSU100084'</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> m:</span><br><span class="line"><span class="meta">... </span>            print(m.group(<span class="number">0</span>))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">100081</span></span><br><span class="line"><span class="number">100084</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>re.sub(pattern, repl, string, count=0, flags=0)</strong></p><ul><li>在一个字符串中替换所有匹配正则表达式的子串返回替换后的字符串。<blockquote><p>pattern : 正则表达式的字符串或原生字符串表示<br>repl : 替换匹配字符串的字符串<br>string : 待匹配字符串<br>count : 匹配的最大替换次数<br>flags : 正则表达式使用时的控制标记</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">r'[1-9]\d&#123;5&#125;'</span>, <span class="string">':zipcode'</span>, <span class="string">'BIT100081 TSU100084'</span>)</span><br><span class="line"><span class="string">'BIT:zipcode TSU:zipcode'</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p><strong>flags常用控制标记</strong></p><table><thead><tr><th align="left">常用标记</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">re.I　re.IGNORECASE</td><td align="left">忽略正则表达式中的大小写，[A-Z]能够匹配小写字符</td></tr><tr><td align="left">re.M　re.MULTILINE</td><td align="left">正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</td></tr><tr><td align="left">re.S　re.DOTALL</td><td align="left">正则表达式中的.操作符能够匹配所有字符，’.’默认匹配除换行外的所有字符</td></tr></tbody></table></li><li><p><strong>Re库的另一种等价用法</strong></p><ul><li>regex = re.compile(pattern, flags=0)<blockquote><p>pattern : 正则表达式的字符串或原生字符串表示<br>flags : 正则表达式使用时的控制标记</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数式用法：一次性操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst = re.search(<span class="string">r'[1‐9]\d&#123;5&#125;'</span>, <span class="string">'BIT 100081'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 面向对象用法：编译后的多次操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pat = re.compile(<span class="string">r'[1‐9]\d&#123;5&#125;'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst = pat.search(<span class="string">'BIT 100081'</span>)</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">regex.search()</td><td align="center">在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td></tr><tr><td align="center">regex.match()</td><td align="center">从一个字符串的开始位置起匹配正则表达式，返回match对象</td></tr><tr><td align="center">regex.findall()</td><td align="center">搜索字符串，以列表类型返回全部能匹配的子串</td></tr><tr><td align="center">regex.split()</td><td align="center">将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td align="center">regex.finditer()</td><td align="center">搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</td></tr><tr><td align="center">regex.sub()</td><td align="center">在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table></li></ul><h2 id="Re库的match对象"><a href="#Re库的match对象" class="headerlink" title="Re库的match对象"></a><strong>Re库的match对象</strong></h2><ul><li><p><strong>match对象的属性</strong></p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.string</td><td align="center">待匹配的文本</td></tr><tr><td align="center">.re</td><td align="center">匹配时使用的patter对象（正则表达式）</td></tr><tr><td align="center">.pos</td><td align="center">正则表达式搜索文本的开始位置</td></tr><tr><td align="center">.endpos</td><td align="center">正则表达式搜索文本的 结束位置</td></tr></tbody></table></li><li><p><strong>match对象的方法</strong></p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.group(0)</td><td align="center">获得匹配后的字符串</td></tr><tr><td align="center">.start()</td><td align="center">匹配字符串在原始字符串的开始位置</td></tr><tr><td align="center">.end()</td><td align="center">匹配字符串在原始字符串的结束位置</td></tr><tr><td align="center">.span()</td><td align="center">返回(.start(), .end())</td></tr></tbody></table></li><li><p><strong>实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.search(<span class="string">r'[]1-9]\d&#123;5&#125;'</span>, <span class="string">'BIT 100081 TSU 100084'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.string</span><br><span class="line"><span class="string">'BIT 100081 TSU 100084'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.re</span><br><span class="line">re.compile(<span class="string">'[]1-9]\\d&#123;5&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.pos</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.endpos</span><br><span class="line"><span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">'100081'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只保留一次结果</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: no such group</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次陪陪成功开始位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.start()</span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次陪陪成功结束的后一个位置</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.end()</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span()</span><br><span class="line">(<span class="number">4</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Re库的贪婪匹配和最小匹配"><a href="#Re库的贪婪匹配和最小匹配" class="headerlink" title="Re库的贪婪匹配和最小匹配"></a><strong>Re库的贪婪匹配和最小匹配</strong></h2><ul><li><strong>贪婪匹配</strong><ul><li>Re库默认采用贪婪匹配，即输出匹配最长的子串。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.search(<span class="string">r'PY.*N'</span>, <span class="string">'PYANBNCNDN'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">'PYANBNCNDN</span></span><br></pre></td></tr></table></figure></li><li>最小匹配<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多加了一个'?'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.search(<span class="string">r'PY.*?N'</span>, <span class="string">'PYANBNCNDN'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">'PYAN'</span></span><br></pre></td></tr></table></figure></li><li>最小匹配操作符<table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*?</td><td align="center">前一个字符0次或无限次扩展，最小匹配</td></tr><tr><td align="center">+?</td><td align="center">前一个字符1次或无限次扩展，最小匹配</td></tr><tr><td align="center">??</td><td align="center">前一个字符0次或1次扩展，最小匹配</td></tr><tr><td align="center">{m,n}?</td><td align="center">扩展前一个字符m至n次（含n），最小匹配</td></tr></tbody></table></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Re库笔记。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Crawler" scheme="http://yoursite.com/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>几个简单的爬虫实例</title>
    <link href="http://yoursite.com/2020/04/11/craw-stage-note/"/>
    <id>http://yoursite.com/2020/04/11/craw-stage-note/</id>
    <published>2020-04-11T06:43:13.000Z</published>
    <updated>2020-04-17T08:48:53.165Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>爬虫实例记录。</em></strong></p><a id="more"></a><hr><h2 id="中国大学排名定向爬虫"><a href="#中国大学排名定向爬虫" class="headerlink" title="中国大学排名定向爬虫"></a><strong>中国大学排名定向爬虫</strong></h2><ul><li><p><strong>网站</strong></p><blockquote><p><a href="http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html" target="_blank" rel="noopener">http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html</a></p></blockquote></li><li><p><strong>功能描述</strong></p><blockquote><p>输入：大学排名URL链接。<br>输出：大学爱明信息的屏幕输出（排名，大学名称，总分）。<br>技术路线：request-bs4。<br>定向爬虫：仅对输入URL进行爬取，不扩展爬取。</p></blockquote></li><li><p><strong>程序的设计步骤</strong></p><blockquote><p>步骤1：从网络上获取大学排名网页内容，使用getHTMLText()。<br>步骤2：提取网页内容中信息到合适的数据结构，使用fillUnivList()。<br>步骤3：利用数据结构展示并输出结果，使用printUnivList()。</p></blockquote></li><li><p><strong>实例编写</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist, html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'tbody'</span>).children:</span><br><span class="line">        <span class="keyword">if</span> isinstance(tr, bs4.element.Tag):</span><br><span class="line">            tds = tr(<span class="string">'td'</span>)</span><br><span class="line">            ulist,append([tds[<span class="number">0</span>].string, tds[<span class="number">1</span>].string, tds[<span class="number">3</span>].string])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivList</span><span class="params">(ulist, num)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;"</span>.format(<span class="string">"排名"</span>, <span class="string">"学校名单"</span>, <span class="string">"总分"</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(<span class="string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;\t"</span>.format(u[<span class="number">0</span>], u[<span class="number">1</span>], u[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    uinfo = []</span><br><span class="line">    url = <span class="string">'http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html'</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    fillUnivList(uinfo, html)</span><br><span class="line">    printUnivList(uinfo, <span class="number">20</span>) <span class="comment"># 打印20个大学</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ul><p><strong>优化</strong></p><ul><li><strong>中文字符对齐问题的解决</strong><blockquote><p>采用中文字符的空格填充chr(12288)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivList</span><span class="params">(ulist, num)</span>:</span></span><br><span class="line">    tplt = &#123;<span class="number">0</span>:^<span class="number">10</span>&#125;\t&#123;<span class="number">1</span>:^<span class="number">6</span>&#125;\t&#123;<span class="number">2</span>:^<span class="number">10</span>&#125;</span><br><span class="line">    print(tplt.format(<span class="string">"排名"</span>, <span class="string">"学校名单"</span>, <span class="string">"总分"</span>), chr(<span class="number">12288</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(tplt.format(u[<span class="number">0</span>], u[<span class="number">1</span>], u[<span class="number">2</span>], chr(<span class="number">12288</span>)))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;爬虫实例记录。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Crawler" scheme="http://yoursite.com/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>信息标记笔记</title>
    <link href="http://yoursite.com/2020/04/10/info-note/"/>
    <id>http://yoursite.com/2020/04/10/info-note/</id>
    <published>2020-04-10T12:54:42.000Z</published>
    <updated>2020-04-17T08:50:12.976Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>学习爬虫途中所学信息标记相关知识的笔记。</em></strong></p><a id="more"></a><hr><h2 id="HTML的信息标记"><a href="#HTML的信息标记" class="headerlink" title="HTML的信息标记"></a><strong>HTML的信息标记</strong></h2><blockquote><p>HTML时WWW（World Wide Web）的信息组织方式，由声音、图像、视频组成超文本。<br>HTML通过预定义的&lt;&gt;…&lt;/&gt;标签形式组织不同类型的信息。<br>有三种主要形式——XML、JSON和YAML。</p></blockquote><ul><li><p><strong>XML（extensible markup language）</strong></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--类似html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"china.jpg"</span> <span class="attr">size</span>=<span class="string">"10"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>JSON（JavaScript Obejt Notation）</strong></p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Json本身没有注释</span><br><span class="line"># 键值对key:value</span><br><span class="line">"name" : "John"</span><br><span class="line"></span><br><span class="line"># 多值用[,]组织</span><br><span class="line">"name" : ["John", "Dakanashi"]</span><br><span class="line"></span><br><span class="line"># 键值对嵌套用&#123;,&#125;</span><br><span class="line">"name" : &#123;</span><br><span class="line">        "newName" : "John",</span><br><span class="line">        "oldname" : "Dakanashi"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>YAML（YAML Ain’t Markup Language）</strong></p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无类型键值对key:value</span></span><br><span class="line"><span class="attr">name :</span> <span class="string">John</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过缩进形式表达所属关系</span></span><br><span class="line"><span class="attr">name :</span> </span><br><span class="line">    <span class="attr">newName :</span> <span class="string">John</span></span><br><span class="line">    <span class="attr">oldName :</span> <span class="string">Dakanashi</span></span><br><span class="line">     </span><br><span class="line"><span class="comment"># 使用‘-’表达并列关系</span></span><br><span class="line"><span class="attr">name :</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">John</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Dakanashi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用‘|’表达整块数据，使用‘#’表示注释</span></span><br><span class="line"><span class="attr">text:</span> <span class="string">|</span></span><br><span class="line"><span class="string">ajsldjaskldjsakldjaskldjaskldjakldjsakldjakldjlk</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="三种信息标记形式的比较"><a href="#三种信息标记形式的比较" class="headerlink" title="三种信息标记形式的比较"></a><strong>三种信息标记形式的比较</strong></h2><table><thead><tr><th align="center">信息标记</th><th align="center">自身特点</th><th align="center">应用特点</th></tr></thead><tbody><tr><td align="center">XML</td><td align="center">最早的通用信息标记语言，可扩展性好，但繁琐</td><td align="center">Internet上的信息交互与传递</td></tr><tr><td align="center">JSON</td><td align="center">信息有类型，适合程序处理（js），较XML简洁</td><td align="center">移动应用云端和节点的信息用心，无注释</td></tr><tr><td align="center">YAML</td><td align="center">信息无类型，文本信息比例最高，可读性好</td><td align="center">各类系统的配置文件，有注释易读</td></tr></tbody></table><h2 id="信息提取的一般方法"><a href="#信息提取的一般方法" class="headerlink" title="信息提取的一般方法"></a><strong>信息提取的一般方法</strong></h2><ol><li><p><strong>形式解析：完整解析信息的标记个事，再提取相关信息（需要标记解析器，例如bs4库的标签树遍历）。</strong></p><blockquote><p>优点：信息解析准确<br>缺点：提取过程繁琐，速度慢</p></blockquote></li><li><p><strong>搜索：无视标记形式，直接搜索关键信息，对信息的文本查找函数即可。</strong></p><blockquote><p>优点：提取过程简洁，速度较快。<br>缺点：提取结果准确性与信息内容相关。</p></blockquote></li><li><p><strong>融合方法：结合形式解析与搜索方法， 提取关键信息，需要标记解析器及文本查找函数。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提取HTML中所有URL链接</span></span><br><span class="line"><span class="comment"># 思路：  1）搜索到所有&lt;a&gt;标签</span></span><br><span class="line"><span class="comment">#         2）解析&lt;a&gt;标签格式，提取href后的链接内容</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"http://python123.io/ws/demo.html"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo = r.text</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo, <span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>):</span><br><span class="line"><span class="meta">... </span>    print(link.get(<span class="string">'href'</span>))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">http://www.icourse163.org/course/BIT<span class="number">-268001</span></span><br><span class="line">http://www.icourse163.org/course/BIT<span class="number">-1001870001</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="基于bs4库的HTML内容查找方法"><a href="#基于bs4库的HTML内容查找方法" class="headerlink" title="基于bs4库的HTML内容查找方法"></a><strong>基于bs4库的HTML内容查找方法</strong></h2><ul><li><p><strong>&lt;&gt;.find_all(name, attrs=None, recursive=True, string=None, **kwargs)</strong></p><blockquote><p>name：对标签名称的检索字符串。<br>attrs：对标签属性值的检索字符串，可标注属性检索。<br>recursive：是否对子孙全部进行检索，默认为True。<br>string：&lt;&gt;…&lt;/&gt;中字符串区域的检索。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找含a标签的部分</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(<span class="string">'a'</span>)</span><br><span class="line">[&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;, &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找a，b两个标签的部分</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all([<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line">[&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;, &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;, &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出所有标签</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="literal">True</span>):</span><br><span class="line"><span class="meta">... </span>    print(tag.name)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">html</span><br><span class="line">head</span><br><span class="line">title</span><br><span class="line">body</span><br><span class="line">p</span><br><span class="line">b</span><br><span class="line">p</span><br><span class="line">a</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入正则表达式库，查找名字中带b的标签</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(re.compile(<span class="string">'b'</span>)):</span><br><span class="line"><span class="meta">... </span>    print(tag.name)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">body</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询含有course属性的p标签</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(<span class="string">'p'</span>, <span class="string">'course'</span>)</span><br><span class="line">[&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找所有标签中含有id为link1的标签</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(id=<span class="string">'link1'</span>)</span><br><span class="line">[&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询的link必须是完全匹配的才可以</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(id=<span class="string">'link'</span>)</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用正则表达式查询包含link的属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(id=re.compile(<span class="string">'link'</span>))</span><br><span class="line">[&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;, &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有标签a</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(<span class="string">'a'</span>)</span><br><span class="line">[&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;, &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;]</span><br><span class="line"><span class="comment"># recursive被设置为False，没有子孙节点被搜索，结果为空</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(<span class="string">'a'</span>, recursive=<span class="literal">False</span>)</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找Basic Python字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(string=<span class="string">'Basic Python'</span>)</span><br><span class="line">[<span class="string">'Basic Python'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用正则表达式查找包含python的字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(string=re.compile(<span class="string">'python'</span>))</span><br><span class="line">[<span class="string">'This is a python demo page'</span>, <span class="string">'The demo python introduces several python courses.'</span>]</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>备注</strong></p><blockquote><p>&lt;tag&gt;(..)等价于&lt;tag&gt;.find_all(..)<br>soup.(..)等价于soup.find_all(..)<br>&lt;&gt;.find()方法使用与&lt;&gt;.find_all()方法略有不同，搜索只返回一个为字符串类型的结果，参数和find_all()相同。</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;学习爬虫途中所学信息标记相关知识的笔记。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Crawler" scheme="http://yoursite.com/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>BeautifulSoup 解析</title>
    <link href="http://yoursite.com/2020/04/08/bs4-note/"/>
    <id>http://yoursite.com/2020/04/08/bs4-note/</id>
    <published>2020-04-08T15:05:01.000Z</published>
    <updated>2020-04-17T08:48:42.692Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>爬虫学习中对bs4库的记录</em></strong></p><a id="more"></a><hr><h2 id="BeautifulSoup的安装"><a href="#BeautifulSoup的安装" class="headerlink" title="BeautifulSoup的安装"></a><strong>BeautifulSoup的安装</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup<span class="comment"># 注意大小写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(<span class="string">"&lt;html&gt;data&lt;/html&gt;"</span>, <span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup2 = BeautifulSoup(open(<span class="string">"/home/john/celitea/demo.html"</span>), <span class="string">"html.parser"</span>)</span><br></pre></td></tr></table></figure><h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a><strong>基本元素</strong></h2><table><thead><tr><th align="center">基本元素</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Tag</td><td align="center">标签,最基本的信息组成单元 ，分别用&lt;&gt;和&lt;/&gt;标明开头和结尾</td></tr><tr><td align="center">Name</td><td align="center">标签的名字，&lt;p&gt;…&lt;/p&gt;的名字是’p’，格式：&lt;tag&gt;.name</td></tr><tr><td align="center">Attributes</td><td align="center">标签的属性，字典形式组织，格式：&lt;tag&gt;.attrs</td></tr><tr><td align="center">NavigableString</td><td align="center">标签内非属性字符串，&lt;&gt;…&lt;/&gt;中字符串，格式：&lt;tag&gt;.string，可跨越嵌套的标签层次</td></tr><tr><td align="center">Comment</td><td align="center">标签内字符串的注释部分，一种特殊的Comment类型</td></tr></tbody></table><ul><li>代码演示<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"http://python123.io/ws/demo.html"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo = r.text</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo</span><br><span class="line"><span class="string">'&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;\r\n&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:\r\n&lt;a href="http://www.icourse163.org/course/BIT-268001" class="py1" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a href="http://www.icourse163.org/course/BIT-1001870001" class="py2" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;\r\n&lt;/body&gt;&lt;/html&gt;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任何存在与HTML语法中的标签都可以用soup.&lt;tag&gt;访问获得</span></span><br><span class="line"><span class="comment">#当HTML文档中存在多个想用&lt;tag&gt;对应内容时，soup.&lt;tag&gt;返回第一个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo, <span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.title</span><br><span class="line">&lt;title&gt;This is a python demo page&lt;/title&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag = soup.a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag</span><br><span class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个&lt;tag&gt;都有自己的名字，通过&lt;tag&gt;.name获取，字符串类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag = soup.a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag</span><br><span class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.name</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.parent.name</span><br><span class="line"><span class="string">'p'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.parent.parent.name</span><br><span class="line"><span class="string">'body'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个&lt;tag&gt;可以有0或多个属性，字典类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag = soup.a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag.attrs</span><br><span class="line">&#123;<span class="string">'href'</span>: <span class="string">'http://www.icourse163.org/course/BIT-268001'</span>, <span class="string">'class'</span>: [<span class="string">'py1'</span>], <span class="string">'id'</span>: <span class="string">'link1'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag.attrs[<span class="string">'class'</span>]</span><br><span class="line">[<span class="string">'py1'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag.attrs[<span class="string">'href'</span>]</span><br><span class="line"><span class="string">'http://www.icourse163.org/course/BIT-268001'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(tag.attrs)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(tag)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># <span class="title">NavigableString</span>可以跨越多个层次</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">soup</span>.<span class="title">a</span></span></span><br><span class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.string</span><br><span class="line"><span class="string">'Basic Python'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.p</span><br><span class="line">&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.p.string</span><br><span class="line"><span class="string">'The demo python introduces several python courses.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(soup.p.string)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># <span class="title">Comment</span>是一种特殊类型</span></span><br><span class="line">&gt;&gt;&gt; newsoup = BeautifulSoup("&lt;b&gt;&lt;!--This is a comment--&gt;&lt;/b&gt;&lt;p&gt;This is not a comment&lt;/p&gt;", "html.parser")</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newsoup.b.string</span><br><span class="line"><span class="string">'This is a comment'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(newsoup.b.string)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Comment</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">newsoup</span>.<span class="title">p</span>.<span class="title">string</span></span></span><br><span class="line"><span class="class">'<span class="title">This</span> <span class="title">is</span> <span class="title">not</span> <span class="title">a</span> <span class="title">comment</span>'</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(newsoup.p.string)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>'&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="HTML内容遍历"><a href="#HTML内容遍历" class="headerlink" title="HTML内容遍历"></a><strong>HTML内容遍历</strong></h2><ul><li><strong>标签树的上层遍历</strong><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.parent</td><td align="center">节点的父亲标签</td></tr><tr><td align="center">.parents</td><td align="center">节点先辈标签的迭代类型，用于循环遍历先辈节点</td></tr><tr><td align="center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo, <span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.title.parent</span><br><span class="line">&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.html.parent <span class="comment">#html的父辈是其本身</span></span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.parent <span class="comment">#soup本身没有父辈</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for循环进行上行遍历</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> parent <span class="keyword">in</span> soup.a.parents:</span><br><span class="line">        <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">             print(parent)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(parent.name)</span><br></pre></td></tr></table></figure></td><td align="center"></td></tr></tbody></table></li><li><strong>标签树的下层遍历</strong><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.contents</td><td align="center">子节点的列表，将&lt;tag&gt;所有儿子节点存入列表</td></tr><tr><td align="center">.children</td><td align="center">子节点的迭代类型，与.content类似，用于循环儿子节点</td></tr><tr><td align="center">.descendents</td><td align="center">子孙节点的迭代类型， 包含所有子孙节点，用于循环遍历</td></tr><tr><td align="center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo, <span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.head</span><br><span class="line">&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.head.contents</span><br><span class="line">[&lt;title&gt;This is a python demo page&lt;/title&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.body.contents</span><br><span class="line">['\n', &lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;, '\n', &lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;, '\n']</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(soup.body.contents)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.body.contents[<span class="number">1</span>]</span><br><span class="line">&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for循环遍历孩子节点</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">     print(child)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for循环遍历后辈节点</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.descendants:</span><br><span class="line">     print(child)</span><br></pre></td></tr></table></figure></td><td align="center"></td></tr></tbody></table></li><li><strong>标签树的平行遍历</strong><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.next_sibling</td><td align="center">返回按照HTML文本顺序的下一个平行节点标签</td></tr><tr><td align="center">.previous_sibling</td><td align="center">返回按照HTML文本顺序的上一个平行节点标签</td></tr><tr><td align="center">.next_sibilings</td><td align="center">迭代类型，返回按照HTML文本顺序的后续所有平行节点标签</td></tr><tr><td align="center">.previous_siblings</td><td align="center">迭代类型，返回按照HTML文本顺序的前续所有平行节点标签</td></tr><tr><td align="center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo, <span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.next_sibling</span><br><span class="line"><span class="string">' and '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.next_sibling.next_sibling</span><br><span class="line">&lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.previous_sibling</span><br><span class="line"><span class="string">'Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:\r\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.previous_sibling.previous_sibling</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.parent</span><br><span class="line">&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 平行遍历后续节点</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_sibling:</span><br><span class="line">         print(sibling)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平行遍历前序节点</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_sibling:</span><br><span class="line">         print(sibling)</span><br></pre></td></tr></table></figure></td><td align="center"></td></tr></tbody></table></li></ul><h2 id="HTML格式输出"><a href="#HTML格式输出" class="headerlink" title="HTML格式输出"></a><strong>HTML格式输出</strong></h2><ol><li><p><strong>prettify()方法</strong></p><blockquote><p>prettify()为HTML文本&lt;&gt;及其内容增加’\n’<br>prettify()可用于标签，方法：&lt;tag&gt;.prettify()</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo, <span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.prettify()</span><br><span class="line"><span class="string">'&lt;html&gt;\n &lt;head&gt;\n  &lt;title&gt;\n   This is a python demo page\n  &lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n  &lt;p class="title"&gt;\n   &lt;b&gt;\n    The demo python introduces several python courses.\n   &lt;/b&gt;\n  &lt;/p&gt;\n  &lt;p class="course"&gt;\n   Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:\n   &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;\n    Basic Python\n   &lt;/a&gt;\n   and\n   &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;\n    Advanced Python\n   &lt;/a&gt;\n   .\n  &lt;/p&gt;\n &lt;/body&gt;\n&lt;/html&gt;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(soup.prettify())</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;</span><br><span class="line">   This <span class="keyword">is</span> a python demo page</span><br><span class="line">  &lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;p class="title"&gt;</span><br><span class="line">   &lt;b&gt;</span><br><span class="line">    The demo python introduces several python courses.</span><br><span class="line">   &lt;/b&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p class="course"&gt;</span><br><span class="line">   Python <span class="keyword">is</span> a wonderful general-purpose programming language. You can learn Python <span class="keyword">from</span> novice to professional by tracking the following courses:</span><br><span class="line">   &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;</span><br><span class="line">    Basic Python</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   <span class="keyword">and</span></span><br><span class="line">   &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;</span><br><span class="line">    Advanced Python</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   .</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>编码</strong></p><blockquote><p>bs4库将任何HTML输入都变成utf-8编码<br>Python 3.x默认支持编码时utf-8，解析无障碍</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(<span class="string">"&lt;p&gt;中文&lt;/p&gt;"</span>, <span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.p.string</span><br><span class="line"><span class="string">'中文'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(soup.p.prettify())</span><br><span class="line">&lt;p&gt;</span><br><span class="line"> 中文</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;爬虫学习中对bs4库的记录&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫笔记</title>
    <link href="http://yoursite.com/2020/04/04/crawler-note/"/>
    <id>http://yoursite.com/2020/04/04/crawler-note/</id>
    <published>2020-04-04T10:28:46.000Z</published>
    <updated>2020-04-17T09:04:13.441Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>对于爬虫的学习记录</em></strong></p><a id="more"></a><hr><h1 id="相关知识说明"><a href="#相关知识说明" class="headerlink" title="相关知识说明"></a><strong><em>相关知识说明</em></strong></h1><ul><li><p><strong>爬虫规模说明</strong></p><table><thead><tr><th align="center">方法</th><th align="center">说明</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">小规模</td><td align="center">数据量小，爬取数据不敏感，Requests库</td><td align="center">爬取网页，玩转网页</td></tr><tr><td align="center">中规模</td><td align="center">数据规模较大，爬取速度敏感，Scrapy库</td><td align="center">爬取网站，爬取系列网站</td></tr><tr><td align="center">大规模</td><td align="center">搜索引擎，爬取速度关键</td><td align="center">爬取全网</td></tr></tbody></table></li><li><p><strong>网络爬虫的限制</strong></p><ul><li>来源审查：判断User-Agent进行限制<blockquote><p>检查来访HTTP协议头的User-Agent域，只响应浏览器或友好爬虫的访问。</p></blockquote></li><li>发布公告：Robots协议<blockquote><p>告知所有爬虫网站的爬取策略，要求爬虫遵守。</p></blockquote></li></ul></li><li><p><strong>Robots协议</strong></p><ul><li>作用：网站告知网络爬虫哪些页面可以抓取，那些不行。</li><li>形式：在网站根目录下的robots.txt文件夹。</li></ul></li></ul><h1 id="Requests库网络爬虫实例"><a href="#Requests库网络爬虫实例" class="headerlink" title="Requests库网络爬虫实例"></a><strong><em>Requests库网络爬虫实例</em></strong></h1><ol><li><p><strong>京东商品页面的爬取</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"https://item.jd.com/2967929.html"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(r.text[:<span class="number">1000</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure></li><li><p>亚马逊商品页面的爬取</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"https://www.amazon.cn/gp/product/B01M8L5Z3Y"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'usr-agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125;<span class="comment"># 不更改headers会遭到拒绝访问</span></span><br><span class="line">    r = requests.get(url, headers=kv)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(r.text[<span class="number">1000</span>:<span class="number">2000</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure></li><li><p>百度/360搜索相关字提交</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">keyword = <span class="string">"Python"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv= &#123;<span class="string">'wd'</span>: keyword&#125;<span class="comment"># 设置关键词</span></span><br><span class="line">    <span class="comment"># 将关键词传入，360搜索将url换为http://www.so.com/s</span></span><br><span class="line">    r = requests.get(<span class="string">"http://www.baidu.com/s"</span>, params=kv)</span><br><span class="line">    print(r.request.url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    print(lem(r.text))<span class="comment"># 打印搜索到的条目数量</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure></li><li><p>网络图片的爬取和存储</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">import</span> requests</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    url = <span class="string">"http://image.ngchina.com.cn/2019/0523/20190523103156143.jpg"</span></span><br><span class="line">    root = <span class="string">"/home/john/celitea"</span></span><br><span class="line">    path = root + url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">            os.mkdir(root)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            r = requests.get(url)</span><br><span class="line">            <span class="keyword">with</span> open(path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(r.content)</span><br><span class="line">                f.close()</span><br><span class="line">                print(<span class="string">"文件保存成功"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"文件已存在"</span>)</span><br><span class="line">    <span class="keyword">except</span>：</span><br><span class="line">        print(<span class="string">"爬取失败"</span>)</span><br><span class="line">    ``` </span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> IP地址归属地的自动查询</span><br><span class="line">    ```Python</span><br><span class="line">    <span class="comment"># 此方法已不适用，仅供参考</span></span><br><span class="line">    <span class="keyword">import</span> requests</span><br><span class="line">    url = <span class="string">"http://m.ip138.com/ip.asp?ip="</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url+<span class="string">'104.36.66.224'</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        print(r.text[<span class="number">-500</span>:])</span><br><span class="line">    <span class="keyword">except</span>：</span><br><span class="line">        print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;对于爬虫的学习记录&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Crawler" scheme="http://yoursite.com/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>request库小记</title>
    <link href="http://yoursite.com/2020/04/04/request-note/"/>
    <id>http://yoursite.com/2020/04/04/request-note/</id>
    <published>2020-04-04T09:59:07.000Z</published>
    <updated>2020-04-17T09:04:10.461Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>学习爬虫之前先记录一下request库</em></strong></p><a id="more"></a><hr><ul><li><p><strong>HTTP协议</strong></p><blockquote><p>HTTP，Hypertext Transfer Protocol，超文本传输协议。<br>HTTP是一个基于“请求与响应”模式的、无状态的应用层协议。<br>HTTP协议采用URL作为定位网络资源的标识。</p></blockquote></li><li><p><strong>Request库的7个主要方法</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>requests.request()</td><td>构造一个请求，支撑一下个方法的基础方法</td></tr><tr><td>requests.get()</td><td>获取HTML网页的主要方法，对应于HTTP的GET</td></tr><tr><td>requests.head()</td><td>获取HTML网页头信息的方法，对应于HTTP的HEAD</td></tr><tr><td>requests.post()</td><td>向HTML网页提交POST请求的方法，对应于HTTP的POST</td></tr><tr><td>requests.put()</td><td>向HTML网页提交PUT请求的方法，对应于HTTP的PUT</td></tr><tr><td>requests.patch()</td><td>向HTML网页提交局部修改请求，对应于HTTP的PATCH</td></tr><tr><td>requests.delete()</td><td>向HTML网页提交删除请求，对应于HTTP的DELETE</td></tr></tbody></table></li><li><p><strong>requests.request(method, url, **kwargs)</strong></p><blockquote><p>method：上述说明的7种方法。<br>url：拟获取页面的url链接。<br>**kwargs：13个控制访问的参数，均为可选项。</p></blockquote></li><li><p><strong>**kwargs详解</strong></p><ol><li>params：字典或字节序列，作为可选参数增加到url中。   <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv = &#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>, <span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'GET'</span>, <span class="string">'http://python123.io/ws'</span>, params=kv)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.url)</span><br><span class="line">https://python123.io/ws?key1=value1&amp;key2=value2</span><br></pre></td></tr></table></figure></li><li>data：字典、字节序列或文件对象，作为Requests的数据进行存储。   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv = &#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>, <span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>, <span class="string">'http://python123.io/ws'</span>, data=kv)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>body = <span class="string">'主体内容'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>, <span class="string">'http://python123.io/ws'</span>, data=body.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></li><li>json：JSON格式的数据，作为Requests的数据。   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv = &#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>, <span class="string">'http://python123.io/ws'</span>, json=kv)</span><br></pre></td></tr></table></figure></li><li>headers：字典，HTTP头定制。   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hd = &#123;<span class="string">'user-agent'</span>:<span class="string">'Chrome/10'</span>&#125;<span class="comment">#模拟Chrome浏览器第10个版本</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>, <span class="string">'http://python123.io/ws'</span>, headers=hd)</span><br></pre></td></tr></table></figure></li><li>cookies：字典或CookieJar，Request中的cookie。</li><li>auth：元组，支持HTTP认证功能。</li><li>files：字典类型，传输文件。   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fs = &#123;<span class="string">'file'</span>: open(<span class="string">'data.xls'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>, <span class="string">'http://python123.io/ws'</span>, files=fs)</span><br></pre></td></tr></table></figure></li><li>timeout：设定超时时间，秒为单位。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>, <span class="string">'http://www.baidu.com'</span>, timeout=<span class="number">10</span>)<span class="comment">#在timeout时间内请求内容未返回则引起timeout异常</span></span><br></pre></td></tr></table></figure></li><li>proxies：字典类型，设定访问代理服务器，可以增加登录认证。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以防止爬虫爬去信息</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pxs = &#123;<span class="string">'http'</span>: <span class="string">'http://user:pass@10.10.10.1:1234'</span>, <span class="string">'https'</span>: <span class="string">'https://pass@10.10.10.1:4321'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'GET'</span>, <span class="string">'http://www.baidu.com'</span>, proxies=pxs)</span><br></pre></td></tr></table></figure></li><li>allow_redirects：True/False，默认为True，重定向开关。</li><li>stream：True/False，默认为True，获取内容立即下载开关。</li><li>verify：True/False，默认为True，认证SSL证书开关。</li><li>cert：本地SSL证书路径。</li></ol></li><li><p><strong>requests.get(url, params=None, **kwargs)</strong></p><blockquote><p>url：拟获取页面的url链接。<br>params：url中的额外参数，字典或字节流格式，可选。<br>**kwargs：剩余12个可选的控制访问的参数。<br>返回值是一个Response对象。</p></blockquote></li><li><p><strong>requests.head(url, **kwargs)</strong></p><blockquote><p>url：拟获取页面的url链接。<br>**kwargs：13个可选的控制访问的参数。</p></blockquote></li><li><p><strong>requests.post(url, data=None, json=None, **kwargs)</strong></p><blockquote><p>url：拟获取页面的url链接。<br>data：字典、字节序列或文件，Request的内容。<br>json：JSON格式的数据，Request的内容。<br>**kwargs：剩余11个可选的控制访问的参数。</p></blockquote></li><li><p><strong>requests.put(url, data=None, **kwargs)</strong></p><blockquote><p>url：拟获取页面的url链接。<br>data：字典、字节序列或文件，Request的内容。<br>**kwargs：剩余12个可选的控制访问的参数。</p></blockquote></li><li><p><strong>requests.patch(url, data=None, **kwargs)</strong></p><blockquote><p>url：拟获取页面的url链接。<br>data：字典、字节序列或文件，Request的内容。<br>**kwargs：剩余12个可选的控制访问的参数。</p></blockquote></li><li><p><strong>requests.delete(url, **kwargs)</strong></p><blockquote><p>url：拟获取页面的url链接。<br>**kwargs：13个可选的控制访问的参数。</p></blockquote></li><li><p><strong>Response对象五个必要属性</strong></p><table><thead><tr><th>异常</th><th>说明</th></tr></thead><tbody><tr><td>r.status_code</td><td>HTTP请求的返回状态，200表示连接成功，404表示失败</td></tr><tr><td>r.text</td><td>HTTP相应诶荣的字符串形式，即，url对应的页面内容</td></tr><tr><td>r.encoding</td><td>从HTTP header中猜测的响应内容编码方式，如果header中不存在charset，则认为编码为ISO-8859-1</td></tr><tr><td>r.apparent_encoding</td><td>从内容中分析出的响应内容编码方式（备选编码方式）</td></tr><tr><td>r.content</td><td>HTTP相应内容的二进制形式</td></tr></tbody></table></li><li><p><strong>r.encoding和r.apparent_encoding辨析</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="string">'&lt;!DOCTYPE html&gt;\r\n&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet type=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;ç\x99¾åº¦ä¸\x80ä¸\x8bï¼\x8cä½\xa0å°±ç\x9f¥é\x81\x93&lt;/title&gt;&lt;/head&gt; &lt;body link=#0000cc&gt; &lt;div id=wrapper&gt; &lt;div id=head&gt; &lt;div class=head_wrapper&gt; &lt;div class=s_form&gt; &lt;div class=s_form_wrapper&gt; &lt;div id=lg&gt; &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129&gt; &lt;/div&gt; &lt;form id=form name=f action=//www.baidu.com/s class=fm&gt; &lt;input type=hidden name=bdorz_come value=1&gt; &lt;input type=hidden name=ie value=utf-8&gt; &lt;input type=hidden name=f value=8&gt; &lt;input type=hidden name=rsv_bp value=1&gt; &lt;input type=hidden name=rsv_idx value=1&gt; &lt;input type=hidden name=tn value=baidu&gt;&lt;span class="bg s_ipt_wr"&gt;&lt;input id=kw name=wd class=s_ipt value maxlength=255 autocomplete=off autofocus&gt;&lt;/span&gt;&lt;span class="bg s_btn_wr"&gt;&lt;input type=submit id=su value=ç\x99¾åº¦ä¸\x80ä¸\x8b class="bg s_btn"&gt;&lt;/span&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=u1&gt; &lt;a href=http://news.baidu.com name=tj_trnews class=mnav&gt;æ\x96°é\x97»&lt;/a&gt; &lt;a href=http://www.hao123.com name=tj_trhao123 class=mnav&gt;hao123&lt;/a&gt; &lt;a href=http://map.baidu.com name=tj_trmap class=mnav&gt;å\x9c°å\x9b¾&lt;/a&gt; &lt;a href=http://v.baidu.com name=tj_trvideo class=mnav&gt;è§\x86é¢\x91&lt;/a&gt; &lt;a href=http://tieba.baidu.com name=tj_trtieba class=mnav&gt;è´´å\x90§&lt;/a&gt; &lt;noscript&gt; &lt;a href=http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl=mn&amp;amp;u=http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1 name=tj_login class=lb&gt;ç\x99»å½\x95&lt;/a&gt; &lt;/noscript&gt; &lt;script&gt;document.write(\'&lt;a href="http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u=\'+ encodeURIComponent(window.location.href+ (window.location.search === "" ? "?" : "&amp;")+ "bdorz_come=1")+ \'" name="tj_login" class="lb"&gt;ç\x99»å½\x95&lt;/a&gt;\');&lt;/script&gt; &lt;a href=//www.baidu.com/more/ name=tj_briicon class=bri style="display: block;"&gt;æ\x9b´å¤\x9aäº§å\x93\x81&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=ftCon&gt; &lt;div id=ftConw&gt; &lt;p id=lh&gt; &lt;a href=http://home.baidu.com&gt;å\x85³äº\x8eç\x99¾åº¦&lt;/a&gt; &lt;a href=http://ir.baidu.com&gt;About Baidu&lt;/a&gt; &lt;/p&gt; &lt;p id=cp&gt;&amp;copy;2017&amp;nbsp;Baidu&amp;nbsp;&lt;a href=http://www.baidu.com/duty/&gt;ä½¿ç\x94¨ç\x99¾åº¦å\x89\x8då¿\x85è¯»&lt;/a&gt;&amp;nbsp; &lt;a href=http://jianyi.baidu.com/ class=cp-feedback&gt;æ\x84\x8fè§\x81å\x8f\x8dé¦\x88&lt;/a&gt;&amp;nbsp;äº¬ICPè¯\x81030173å\x8f·&amp;nbsp; &lt;img src=//www.baidu.com/img/gs.gif&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;\r\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.encoding</span><br><span class="line"><span class="string">'ISO-8859-1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.apparent_encoding</span><br><span class="line"><span class="string">'utf-8'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.encoding = <span class="string">'utf-8'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="string">'&lt;!DOCTYPE html&gt;\r\n&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet type=text/css href=http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt;&lt;/head&gt; &lt;body link=#0000cc&gt; &lt;div id=wrapper&gt; &lt;div id=head&gt; &lt;div class=head_wrapper&gt; &lt;div class=s_form&gt; &lt;div class=s_form_wrapper&gt; &lt;div id=lg&gt; &lt;img hidefocus=true src=//www.baidu.com/img/bd_logo1.png width=270 height=129&gt; &lt;/div&gt; &lt;form id=form name=f action=//www.baidu.com/s class=fm&gt; &lt;input type=hidden name=bdorz_come value=1&gt; &lt;input type=hidden name=ie value=utf-8&gt; &lt;input type=hidden name=f value=8&gt; &lt;input type=hidden name=rsv_bp value=1&gt; &lt;input type=hidden name=rsv_idx value=1&gt; &lt;input type=hidden name=tn value=baidu&gt;&lt;span class="bg s_ipt_wr"&gt;&lt;input id=kw name=wd class=s_ipt value maxlength=255 autocomplete=off autofocus&gt;&lt;/span&gt;&lt;span class="bg s_btn_wr"&gt;&lt;input type=submit id=su value=百度一下 class="bg s_btn"&gt;&lt;/span&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=u1&gt; &lt;a href=http://news.baidu.com name=tj_trnews class=mnav&gt;新闻&lt;/a&gt; &lt;a href=http://www.hao123.com name=tj_trhao123 class=mnav&gt;hao123&lt;/a&gt; &lt;a href=http://map.baidu.com name=tj_trmap class=mnav&gt;地图&lt;/a&gt; &lt;a href=http://v.baidu.com name=tj_trvideo class=mnav&gt;视频&lt;/a&gt; &lt;a href=http://tieba.baidu.com name=tj_trtieba class=mnav&gt;贴吧&lt;/a&gt; &lt;noscript&gt; &lt;a href=http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl=mn&amp;amp;u=http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1 name=tj_login class=lb&gt;登录&lt;/a&gt; &lt;/noscript&gt; &lt;script&gt;document.write(\'&lt;a href="http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u=\'+ encodeURIComponent(window.location.href+ (window.location.search === "" ? "?" : "&amp;")+ "bdorz_come=1")+ \'" name="tj_login" class="lb"&gt;登录&lt;/a&gt;\');&lt;/script&gt; &lt;a href=//www.baidu.com/more/ name=tj_briicon class=bri style="display: block;"&gt;更多产品&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=ftCon&gt; &lt;div id=ftConw&gt; &lt;p id=lh&gt; &lt;a href=http://home.baidu.com&gt;关于百度&lt;/a&gt; &lt;a href=http://ir.baidu.com&gt;About Baidu&lt;/a&gt; &lt;/p&gt; &lt;p id=cp&gt;&amp;copy;2017&amp;nbsp;Baidu&amp;nbsp;&lt;a href=http://www.baidu.com/duty/&gt;使用百度前必读&lt;/a&gt;&amp;nbsp; &lt;a href=http://jianyi.baidu.com/ class=cp-feedback&gt;意见反馈&lt;/a&gt;&amp;nbsp;京ICP证030173号&amp;nbsp; &lt;img src=//www.baidu.com/img/gs.gif&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;\r\n'</span></span><br><span class="line"><span class="comment"># 设置encoding属性收可以看到中文</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Request异常</strong></p><table><thead><tr><th>异常</th><th>说明</th></tr></thead><tbody><tr><td>requests.ConnectionError</td><td>网络连接错误异常，如DNS查询失败、拒绝链接等</td></tr><tr><td>requests.HTTPError</td><td>HTTP错误异常</td></tr><tr><td>requests.URLRequired</td><td>URL缺失异常</td></tr><tr><td>requests.TooManyRedirects</td><td>超过最大重定向次数，产生重定向异常</td></tr><tr><td>requests.ConnectTimeout</td><td>连接远程服务器超时异常</td></tr><tr><td>requests.Timeout</td><td>请求URL超时，产生超时异常</td></tr><tr><td>r.raise_for_status()</td><td>如果不是200，产生异常requests.HTTPError，常放置于try块中</td></tr></tbody></table></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;学习爬虫之前先记录一下request库&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Crawler" scheme="http://yoursite.com/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>Numpy文件的存取</title>
    <link href="http://yoursite.com/2020/03/22/file-of-numpy/"/>
    <id>http://yoursite.com/2020/03/22/file-of-numpy/</id>
    <published>2020-03-21T16:23:05.000Z</published>
    <updated>2020-04-17T08:49:44.646Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>对Numpy中文件相关的函数进行总结</em></strong></p><a id="more"></a><hr><h2 id="1-数组以二进制格式保存。"><a href="#1-数组以二进制格式保存。" class="headerlink" title="1.数组以二进制格式保存。"></a>1.数组以二进制格式保存。</h2><ul><li>np.save和np.load是读写磁盘数组数据的两个主要函数。默认情况下，数组以未压缩的原始二进制格式保存在扩展名为npy的文件中，<u>文件的后缀名字一定会被置为.npy</u>。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.save(<span class="string">"filename.npy"</span>,a) <span class="comment">#将数组a中的数据存入文件</span></span><br><span class="line">b = np.load(<span class="string">"filename.npy"</span>) <span class="comment">#将文件中的数据读取出来并存入b</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="2-存取文本文件"><a href="#2-存取文本文件" class="headerlink" title="2.存取文本文件"></a>2.存取文本文件</h2><ul><li>使用 np.savetxt 和 np.loadtxt 只能读写 1 维和 2 维的数组<br>np.savetxt：将数组写入以某种分隔符隔开的文本文件中<br>np.loadtxt：指定某种分隔符，将文本文件读入到数组中<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.savetxt(<span class="string">"filename.txt"</span>,a)</span><br><span class="line">b =  numpy.loadtxt(<span class="string">"filename.txt"</span>, delimiter=<span class="string">','</span>)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="3-保存为二进制文件"><a href="#3-保存为二进制文件" class="headerlink" title="3.保存为二进制文件"></a>3.保存为二进制文件</h2><ul><li>使用数组的 tofile 函数可以方便地将数组中数据以二进制的格式写进文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.tofile(<span class="string">"filename.bin"</span>) <span class="comment">#将数组a的数据存入二进制文件</span></span><br><span class="line">b = np.fromfile(<span class="string">"filename.bin"</span>,dtype = **) <span class="comment">#从二进制文件中以dtype的形式提取数据并存储于b</span></span><br></pre></td></tr></table></figure></li><li>该方法与np.save有几点区别：</li></ul><ol><li>tofile函数只能将数组保存为二进制文件，文件后缀名没有固定要求。这种保存方法对数据读取有要求，np.fromfile 需要手动指定读出来的数据的的dtype，<u>如果指定的格式与保存时的不一致，则读出来的就是错误的数据</u>。</li><li>tofile函数不能保存当前数据的行列信息，不管数组的排列顺序是C语言格式的还是Fortran语言格式，统一使用C语言格式输出。<u>因此使用 np.fromfile 读出来的数据是一维数组，需要利用reshape指定行列信息</u>。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">0</span>,<span class="number">12</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape = <span class="number">3</span>,<span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.tofile(<span class="string">"a.bin"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.fromfile(<span class="string">"a.bin"</span>, dtype=np.float) <span class="comment"># 按照float类型读入数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="comment"># 读入的数据是错误的</span></span><br><span class="line">array([  <span class="number">2.12199579e-314</span>,   <span class="number">6.36598737e-314</span>,   <span class="number">1.06099790e-313</span>,</span><br><span class="line">         <span class="number">1.48539705e-313</span>,   <span class="number">1.90979621e-313</span>,   <span class="number">2.33419537e-313</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.dtype <span class="comment"># 查看a的dtype</span></span><br><span class="line">dtype(<span class="string">'int32'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.fromfile(<span class="string">"a.bin"</span>, dtype=np.int32) <span class="comment"># 按照int32类型读入数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="comment"># 数据是一维的</span></span><br><span class="line">array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.shape = <span class="number">3</span>, <span class="number">4</span> <span class="comment"># 按照a的shape修改b的shape</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="4-从url获取文件"><a href="#4-从url获取文件" class="headerlink" title="4.从url获取文件"></a>4.从url获取文件</h2><ul><li>np.genfromtxt(url, delimiter, dtype=)：从url获取文件，以delimiter为分隔符，设定数据类型为dtype。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'</span></span><br><span class="line">species = np.genfromtxt(url, delimiter=<span class="string">','</span>, dtype=<span class="string">'str'</span>, usecols=<span class="number">4</span>)</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>参考自<a href="https://blog.csdn.net/u010089444/article/details/52738479" target="_blank" rel="noopener">https://blog.csdn.net/u010089444/article/details/52738479</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;对Numpy中文件相关的函数进行总结&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="File" scheme="http://yoursite.com/tags/File/"/>
    
      <category term="NUmpy" scheme="http://yoursite.com/tags/NUmpy/"/>
    
  </entry>
  
  <entry>
    <title>where和argwhere详解</title>
    <link href="http://yoursite.com/2020/03/21/where-argwhere/"/>
    <id>http://yoursite.com/2020/03/21/where-argwhere/</id>
    <published>2020-03-21T09:36:31.000Z</published>
    <updated>2020-04-17T09:07:32.151Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>学习Numpy发现np.where()使用有一些难点，顺便一块将np.argsort()进行整理</em></strong></p><a id="more"></a><hr><h2 id="np-where-condition-x-y"><a href="#np-where-condition-x-y" class="headerlink" title="np.where(condition, x, y)"></a>np.where(condition, x, y)</h2><ul><li>功能：当condition为真时执行x，否则执行y。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([<span class="number">6.1</span>, <span class="number">7.2</span>, <span class="number">8.3</span>, <span class="number">9.4</span>, <span class="number">10.5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([ <span class="number">6.1</span>,  <span class="number">7.2</span>,  <span class="number">8.3</span>,  <span class="number">9.4</span>, <span class="number">10.5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cond = np.array([<span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.where(cond, a, b)</span><br><span class="line">array([<span class="number">1.1</span>, <span class="number">7.2</span>, <span class="number">3.3</span>, <span class="number">9.4</span>, <span class="number">5.5</span>])</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="np-where-cond-和a-expression-的辨析"><a href="#np-where-cond-和a-expression-的辨析" class="headerlink" title="np.where(cond)和a[expression]的辨析"></a>np.where(cond)和a[expression]的辨析</h2><ul><li>功能：</li><li>a[expression]返回符合expression的元素。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[a&gt;<span class="number">2</span>] <span class="comment">#直接返回元素</span></span><br><span class="line">array([<span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure></li><li>np.where(cond)返回符合cond条件的元素的下标，<u>如果cond中数组为一维，返回值由一个array和一个空值组成，要想得到真真结果需单独获取下标[0]的元素</u>。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.where(a&gt;<span class="number">2</span>) <span class="comment">#返回的是一个元组</span></span><br><span class="line">(array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]),)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.where(a&gt;<span class="number">2</span>)[<span class="number">0</span>] <span class="comment">#想要取得里面的array需要单独获取下标[0]的元素</span></span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="np-argwhere-a"><a href="#np-argwhere-a" class="headerlink" title="np.argwhere(a)"></a>np.argwhere(a)</h2><ul><li>功能：返回非0的数组元组的索引，其中a是要索引数组的条件。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argwhere(a&gt;<span class="number">1</span>)</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.where(a&gt;<span class="number">1</span>)<span class="comment">#当a中涉及的是一个二位数组时，返回的元组会将下标分成两个维度的数组作为返回值返回，无空值。</span></span><br><span class="line">(array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]), array([<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;学习Numpy发现np.where()使用有一些难点，顺便一块将np.argsort()进行整理&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Numpy" scheme="http://yoursite.com/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy中数组切片时使用None</title>
    <link href="http://yoursite.com/2020/03/21/numpy-slice/"/>
    <id>http://yoursite.com/2020/03/21/numpy-slice/</id>
    <published>2020-03-21T08:51:48.000Z</published>
    <updated>2020-04-17T08:50:36.973Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>学习Numpy的途中偶然看到数组切片时使用None的技巧，故记录一下。</em></strong></p><a id="more"></a><hr><ul><li>np.newaxis：None的别称，用于增加一个维度，<u>以下所有代码中None都有可以替换为np.newaxis</u>。</li><li>行的位置设置为None是给整体增加一个维度。</li><li>列的位置设置为None是给<u>每个非整体最大单位元素</u>增加一个维度。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="literal">None</span>, :]</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:, <span class="literal">None</span>]</span><br><span class="line">array([[<span class="number">1</span>],</span><br><span class="line">       [<span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt; a = np.array([[<span class="number">1</span>, <span class="number">1</span>],[<span class="number">2</span>, <span class="number">2</span>],[<span class="number">3</span>, <span class="number">3</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">3</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:, <span class="literal">None</span>]</span><br><span class="line">array([[[<span class="number">1</span>, <span class="number">1</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">2</span>, <span class="number">2</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">3</span>, <span class="number">3</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="literal">None</span>, :]</span><br><span class="line">array([[[<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">3</span>]]])</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;学习Numpy的途中偶然看到数组切片时使用None的技巧，故记录一下。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Numpy" scheme="http://yoursite.com/tags/Numpy/"/>
    
      <category term="Slice" scheme="http://yoursite.com/tags/Slice/"/>
    
  </entry>
  
  <entry>
    <title>三种不同的Copy方式详解</title>
    <link href="http://yoursite.com/2020/03/21/Different-Copy/"/>
    <id>http://yoursite.com/2020/03/21/Different-Copy/</id>
    <published>2020-03-21T06:36:15.000Z</published>
    <updated>2020-04-17T08:49:20.485Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Python中的Copy有三种方式——完全不复制、浅复制（试图）、深复制，接下来进行举例讲解。</em></strong></p><a id="more"></a><hr><h2 id="完全不复制（两个对象共同指向一个数据）"><a href="#完全不复制（两个对象共同指向一个数据）" class="headerlink" title="完全不复制（两个对象共同指向一个数据）"></a>完全不复制（两个对象共同指向一个数据）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#b的id和a的id相同</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">139643466946240</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">139643466946240</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#a和b都会保管数据。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.flags.owndata</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.flags.owndata</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#a就是b</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">is</span> a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br></pre></td></tr></table></figure><hr><h2 id="浅复制（又称试图，发生在np-view和切片操作中）"><a href="#浅复制（又称试图，发生在np-view和切片操作中）" class="headerlink" title="浅复制（又称试图，发生在np.view和切片操作中）"></a>浅复制（又称试图，发生在np.view和切片操作中）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a[:]   <span class="comment">#或者b = a.view()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#a和b的id不同</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">139643466911216</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">139643466946240</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#a负责保管数据，b不负责报关数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.flags.owndata</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.flags.owndata</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##a不是b</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">is</span> a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#改变b的形状不会影响a</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.shape=(<span class="number">2</span>, <span class="number">3</span>)<span class="comment"># no.reshape()也是一种浅复制</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#改变b的元素会影响a，即使改变b形状后改变b元素的值也会影响a</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>] = <span class="number">67</span></span><br><span class="line">array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>, <span class="number">67</span>,  <span class="number">4</span>,  <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">       [<span class="number">67</span>,  <span class="number">4</span>,  <span class="number">5</span>]])</span><br></pre></td></tr></table></figure><hr><h2 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">##a和b的id不同</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">139643466946240</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">139643675206080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#a不是b</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#a和b各自保管一份不同的数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.flags.owndata</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.flags.owndata</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#改变a的元素不会影响b</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>] = <span class="number">90</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([ <span class="number">0</span>,  <span class="number">1</span>, <span class="number">90</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Python中的Copy有三种方式——完全不复制、浅复制（试图）、深复制，接下来进行举例讲解。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>numpy.digitize()笔记</title>
    <link href="http://yoursite.com/2020/03/19/digitize/"/>
    <id>http://yoursite.com/2020/03/19/digitize/</id>
    <published>2020-03-19T15:27:23.000Z</published>
    <updated>2020-04-17T08:49:31.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>对digitilize函数做一下记录</em></strong></p><a id="more"></a><hr><h2 id="numpy-digitize-a-bins-right-False"><a href="#numpy-digitize-a-bins-right-False" class="headerlink" title="numpy.digitize(a, bins, right = False)"></a>numpy.digitize(a, bins, right = False)</h2><ul><li>a：numpy数组</li><li>bins：一维单调数组，必须是升序或者降序。</li><li>right：间隔是否包含最右。</li><li>返回值：a在bins中的位置。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bins = np.array(range(<span class="number">1</span>, <span class="number">102</span>, <span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bins</span><br><span class="line">array([  <span class="number">1</span>,   <span class="number">4</span>,   <span class="number">7</span>,  <span class="number">10</span>,  <span class="number">13</span>,  <span class="number">16</span>,  <span class="number">19</span>,  <span class="number">22</span>,  <span class="number">25</span>,  <span class="number">28</span>,  <span class="number">31</span>,  <span class="number">34</span>,  <span class="number">37</span>,</span><br><span class="line">        <span class="number">40</span>,  <span class="number">43</span>,  <span class="number">46</span>,  <span class="number">49</span>,  <span class="number">52</span>,  <span class="number">55</span>,  <span class="number">58</span>,  <span class="number">61</span>,  <span class="number">64</span>,  <span class="number">67</span>,  <span class="number">70</span>,  <span class="number">73</span>,  <span class="number">76</span>,</span><br><span class="line">        <span class="number">79</span>,  <span class="number">82</span>,  <span class="number">85</span>,  <span class="number">88</span>,  <span class="number">91</span>,  <span class="number">94</span>,  <span class="number">97</span>, <span class="number">100</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.digitize(<span class="number">5</span>,bins)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.digitize(<span class="number">96</span>,bins)</span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></li><li>参考自<a href="https://blog.csdn.net/zby1001/article/details/86616056" target="_blank" rel="noopener">https://blog.csdn.net/zby1001/article/details/86616056</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;对digitilize函数做一下记录&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Numpy" scheme="http://yoursite.com/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy.unique()详解</title>
    <link href="http://yoursite.com/2020/03/19/unique/"/>
    <id>http://yoursite.com/2020/03/19/unique/</id>
    <published>2020-03-19T14:50:39.000Z</published>
    <updated>2020-04-17T08:51:21.570Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>numpy库里面的unique参数比较多，有些复杂，故整理一下方便以后查阅。</em></strong></p><a id="more"></a><hr><h2 id="np-unique-a-return-index-False-return-inverse-False-return-counts-False-axis-None"><a href="#np-unique-a-return-index-False-return-inverse-False-return-counts-False-axis-None" class="headerlink" title="np.unique(a, return_index=False, return_inverse=False, return_counts=False, axis=None)"></a>np.unique(a, return_index=False, return_inverse=False, return_counts=False, axis=None)</h2><ul><li>对于只有a参数的一位数组，去除数组中的重复元素，进行排序后输出。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.unique(a)</span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure></li><li>return_index=True<u>返回新列表元素在旧列表中的位置</u>，并以列表形式储存。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b,s = np.unique(a, return_index=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li>return_inverse=True<u>返回旧列表元素在新列表中的位置</u>，并以列表形式储存。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c,s,p = np.unique(a, return_index=<span class="literal">True</span>, return_inverse=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(c)</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li>return_count=True对独特值进行计数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d,q = np.unique(a, return_counts=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(d)</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(q)</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>参考自<a href="https://blog.csdn.net/yangyuwen_yang/article/details/79193770" target="_blank" rel="noopener">https://blog.csdn.net/yangyuwen_yang/article/details/79193770</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;numpy库里面的unique参数比较多，有些复杂，故整理一下方便以后查阅。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Numpy" scheme="http://yoursite.com/tags/Numpy/"/>
    
      <category term="独特值相关计算" scheme="http://yoursite.com/tags/%E7%8B%AC%E7%89%B9%E5%80%BC%E7%9B%B8%E5%85%B3%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>numpy库中的repeat和tile</title>
    <link href="http://yoursite.com/2020/03/19/repeat-and-tile/"/>
    <id>http://yoursite.com/2020/03/19/repeat-and-tile/</id>
    <published>2020-03-19T13:21:53.000Z</published>
    <updated>2020-04-17T08:50:51.693Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>numpy.repeat()与numpy.tile()的区别</em></strong><br>两个方法都是赋值原数组进行扩展，但细节略微不同，repeat还有一种初始化数组的方法。</p><a id="more"></a><hr><h2 id="np-repeat-a-repeat-axis-None"><a href="#np-repeat-a-repeat-axis-None" class="headerlink" title="np.repeat(a, repeat, axis=None)"></a>np.repeat(a, repeat, axis=None)</h2><h2 id="a-repeat-repeat-axis-None"><a href="#a-repeat-repeat-axis-None" class="headerlink" title="a.repeat(repeat, axis=None)"></a>a.repeat(repeat, axis=None)</h2><ul><li>将a数组进行repeat倍扩充，axis=0时进行纵向扩充，axis=1时进行横向扩充，为设置时进项扁平化处理,不改变自身。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;np.repeat(<span class="number">2</span>, <span class="number">9</span>)</span><br><span class="line">array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.repeat(<span class="number">2</span>)</span><br><span class="line">array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.repeat(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.repeat(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>]])</span><br></pre></td></tr></table></figure></li></ul><h2 id="np-tile-a-tile"><a href="#np-tile-a-tile" class="headerlink" title="np.tile(a, tile)"></a>np.tile(a, tile)</h2><ul><li>对数字进行tile倍<u>轮流扩充</u>，不改变自身。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.tile(a, <span class="number">2</span>)</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]])</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;numpy.repeat()与numpy.tile()的区别&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;两个方法都是赋值原数组进行扩展，但细节略微不同，repeat还有一种初始化数组的方法。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Numpy" scheme="http://yoursite.com/tags/Numpy/"/>
    
      <category term="DL" scheme="http://yoursite.com/tags/DL/"/>
    
  </entry>
  
  <entry>
    <title>numpy 基本使用</title>
    <link href="http://yoursite.com/2020/03/14/numpy-function/"/>
    <id>http://yoursite.com/2020/03/14/numpy-function/</id>
    <published>2020-03-14T10:04:06.000Z</published>
    <updated>2020-04-17T08:50:25.166Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>对Numpy库中的函数进行整理</em></strong><br>学习DL途中对于numpy的一个粗略整理，部分函数只给出常用参数，之后可能会跳出其中几个复杂的做详细记录。</p><a id="more"></a><hr><h2 id="查看数组属性"><a href="#查看数组属性" class="headerlink" title="查看数组属性"></a>查看数组属性</h2><ul><li><strong>函数及其功能</strong><br>a.ndim：维度。<br>a.shape：改变自身各维度的尺度。<br>a.size：元素的个数。<br>a.dtype：元素的类型。<br>a.itemsize：每个元素的大小。</li></ul><hr><h2 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h2><ul><li><strong>函数及其功能</strong><br>np.array(a)/np.ndarray(shape, dtype)：初始化数组a。<br>np.arange(start, end, distance, dtype=None)：由[start, end)创建一个步进为distance的行数组。<br>np.ones((shape), dtype=np.float64)：创建shape大小，内涵dtype类型的1数组。<br>np.zeros((shape), dtype=np.float64)：创建shape大小，内涵dtype类型的0数组。<br>np.full((shape), val, dtype=None)：创建shape大小，内涵dtype类型val的填充数组。<br>np.empty((shape), dtype=np.float64)：生成一个shape大小，dtype类型含无意义数的数组。<br>np.eye(n, dtype=np.float64)：创建一个n*n，dtype类型的单位数组。<br>np.ones_like(a, dtype=None)：创建一个和a相同大小，填充dtype类型的1数组。<br>np.zeros_like(a, dtype=None)：创建一个和a相同大小，填充dtype类型的0数组。<br>np.full_like(a, fill_value, dtype=None)：创建一个和a相同大小，填充dtype类型fill_value的数组。<br>np.empty_like(a, fill_value, dtype=None)：创建一个和a相同大小，填充dtype类型无意义值的数组。<br>np.linspace(start, end, distance)：由[start, end)区间等间距地生成数组.<br>np.set_printoptions(precision=None, threshold=None)：设置所有数组的精度和打印位数。</li></ul><hr><h2 id="数组的合并"><a href="#数组的合并" class="headerlink" title="数组的合并"></a>数组的合并</h2><ul><li><strong>函数及其功能</strong><br>np.concatenate((a, b), axis=0):将b沿着垂直方向（axis=0）或者水平方向（axis=1）与a进行合并。<br>np.vstack((a, b))：沿着竖直方向将数组堆叠起来。<br>np.hstack((a, b))：沿着水平方向将数组堆叠起来。<br>np.c_(a, b)：将列向量进行连接。<br>np.r_(a, b)：将行向量进行链接。</li></ul><hr><h2 id="数组的维度操作"><a href="#数组的维度操作" class="headerlink" title="数组的维度操作"></a>数组的维度操作</h2><ul><li><strong>函数及其功能</strong><br>a.reshape(shape) : 不改变当前数组，依shape生成。<br>a.resize(shape) : 改变当前数组，依shape生成。<br>a.swapaxes(ax1, ax2) : 将两个维度调换。<br>a.flatten() : 对数组进行降维，返回折叠后的一维数组。<br>a.ravel()：对数组进行降维，不会产生源数据的副本。<br>a.squeeze()：对数组进行降维，只能对维数为1的维度降维。<br>np.newaxis：增加一个维度。<br>a.repeat(repeat, axis=None)：将a数组进行repeat倍扩充，axis=0时进行纵向扩充，axis=1时进行横向扩充，为设置时进项扁平化处理。<br>np.repeat(x, y)：创建一个数组，内含y个x。<br>np.tile(a, tile)：对数字进行轮流扩充，将原数据最大单元看做一个单元，将形状变为tile的形状。<br>np.asscalar(a)：将只有一个元素的数组a，转化成标量值。</li></ul><hr><h2 id="数组的类型变换"><a href="#数组的类型变换" class="headerlink" title="数组的类型变换"></a>数组的类型变换</h2><ul><li><strong>函数及其功能</strong><br>a.asarray(b)：将一个非numpy数组的元素转变为numpy数组。<br>a.astype(new_type) : 数据类型的转换。<br>a.tolist()：数组向列表的转换。</li></ul><hr><h2 id="数组的运算操作"><a href="#数组的运算操作" class="headerlink" title="数组的运算操作"></a>数组的运算操作</h2><ul><li><strong>函数及其功能</strong><br>a.transpose()/a.T()：求a矩阵的转置矩阵。<br>np.abs(a)/np.fabs(a)/np.absolute(a): 取各元素的绝对值。<br>np.sqrt(a): 计算各元素的平方根。<br>np.square(a): 计算各元素的平方。<br>np.log(a): 计算以e为底，a的对数。<br>np.log10(a)：计算以10为底，a的对数。<br>np.log2(a)：计算以2为底，a的对数。<br>np.ceil(a)：返回输入值的上限，向上取整。<br>np.floor(a): 返回不大于输入参数的最大整数，向下取整。<br>np.around(a, decimals=0): 返回各元素四舍五入的值，decimals指定保留至小数点后xx位，如果为负，整数将四舍五入到小数点左侧的位置，与round()函数类似。<br>np.exp(a): 计算各元素的指数值。<br>np.sign(a): 计算各元素的符号值 1（+），0，-1（-）。<br>a.copy()：将a进行深复制。<br>a.view()：将a进行浅复制。<br>np.copysign(a, b): 将b中各元素的符号赋值给数组a的对应元素。<br>np.mod(a, b): 元素级的模运算。<br>np.dot(a, b)：对矩阵进行点乘运算。<br>np.sin(a)：计算a的正弦。<br>np.cos(a)：计算a的余弦。<br>np.tan(a)：计算a的正切。<br>np.cov(x)：求协方差。<br>np.corrcoef(x, y)：求x，y相关系数。<br>np.logical_and(x, y)：返回x和y逻辑与之后的结果。<br>np.logical_or(x, y)：返回x和y逻辑或之后的结果。<br>np.logical_not(x, y)：返回x和y逻辑非之后的结果。<br>np.logical_xor(x, y)：返回x和y逻辑异或之后的结果。<br>np.vectorize(myfunc, otype)：定义了一个矢量函数myfunc，输入是嵌套化的对象序列或者是numpy数组，输出是单个或元组的numpy数组，otype指定输出值的类型。<br>np.gradient(a)：计算数组a中元素的梯度。<br>numpy.linalg.solve(a, b)：返回矩阵方程ax=b的解。<br>numpy.linalg.norm(a, ord=2)：求矩阵a的范数，ord=1求一范数，ord=2求二范数，ord=np.inf求无穷范数，当a为两个数组相减的表达式时是计算欧氏距离。</li></ul><hr><h2 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h2><ul><li><strong>函数及其功能</strong><br>np.random.seed(s)：随机数种子，使用下面的随机方法前最好设置一个随机数种子。<br>np.random.rand(d0, d1, …,dn)：各元素是[0, 1）的浮点数，服从均匀分布。<br>np.random.randn(d0, d1, …,dn)：标准正态分布。<br>np.random.randint(low，high=None, size)：创建size个随机整数或整数数组，范围是[low, high），如果没有写参数high的值，则返回[0,low)的值。<br>np.random.shuffle(a)：根据数组a的第一轴进行随机排列，改变数组a。<br>np.random.permutation(a)：根据数组a的第一轴进行随机排列，但是不改变原数组，将生成新数组。<br>np.random.choice(a, size, replace=False, p)：从一维数组a中以概率p抽取元素， 形成size形状新数组，replace表示是否可以重用元素，默认为False。<br>np.random.uniform(low, high, size)：产生均匀分布的数组，起始值为low，high为结束值，size为形状。<br>np.random.normal(loc, scale, size)：产生正态分布的数组，loc为均值，scale为标准差，size为形状。<br>np.random.poisson(lam, size)：产生泊松分布的数组，lam随机事件发生概率，size为形状。</li></ul><hr><h2 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h2><ul><li><strong>函数及其功能</strong><br>np.diff(a, n=1, axis=1)：沿着指定轴计算第N维的离散差值（执行的是后一个元素减去前一个元素）。<br>np.sum(a, axis = None)：依给定轴axis计算数组a相关元素之和，axis为整数或者元组。<br>numpy.cumsum(a, axis=None, dtype=None)：按照所给定的轴参数返回元素的梯形累计和(后一个加上前面元素的累加和)，axis=0，按照行累加。axis=1，按照列累加。axis不给定具体值，就把numpy数组当成一个一维数组。<br>numpy.ufunc.accumulate(a, axis=0, dtype=None)：照所给定的轴参数返回根据ufunc进行计算的元素的梯形累计，ufunc可以是add，multiply等。<br>np.mean(a)：返回数组元素中的均值。<br>np.average(a, axis =None, weights=None)：依给定轴axis计算数组a相关元素的加权平均值。<br>np.median(a, axis=None)：计算数组的中位数。<br>np.std(a, axis=None)：计算数组的标准差，axis=0时计算每一列的标砖茶，axis=1计算每一行的标准差。<br>a.var()：计算数组的方差。<br>np.max(a, axis=0)：寻找数组中的最大值。<br>np.min(a, axis=0)：寻找数组中的最小值。<br>np.maximum(a, b)/np.fmax()：a,b逐位比较（或者计算）元素级的最大值。<br>np.minimum(a, b)/np.fmin()：a,b逐位比较（或者计算）元素级的最小值。<br>np.argmax(a, axis=None)：沿axis返回最大值的索引。<br>np.argmin(a, axis=None)：沿axis返回最小值的索引。<br>np.argsort(a, axis=None)：返回的是数组值从小到大的索引值。<br>np.argpartition(a, kth)：是将第k大的数字，放在第k个位置。类似于快排找第k大的数，堆其它数不做排序。<br>np.amin(a，axis=None)：返回一维数组a中的最小值，二维数组需通过axis指定行或列，获取行（1）或列（0）的最小值，如不指定，则是所有元素的最小值 。<br>np.amax(a, axis=None)：返回一维数组a中的最大值，二维数组需通过axis指定行（1）或列（0），获取行或列的最大值，如不指定，则是所有元素的最大值。<br>numpy.apply_along_axis(func, axis, arr)：func指定转换方法，axis指定按行（1）运算还是按列（0）运算，arr指定数组。<br>np.nonzero(a)：返回数组a中非零元素的索引值数组。<br>np.percentile(a, percent)：返回数组中第percent%位置的浮点数。<br>(expression).all()：两个数组进行比较时如果所有元素根据expression都为True则返回True。<br>(expression).any()：两个数组进行比较时如果任意元素根据expression都为True则返回True。<br>np.bincount(a)：统计a中[min, max]之间各个数字的出现次数。<br>np.where(condition, x, y)：当condition为True时输出x，否则输出y。<br>np.where(condition)：当筛选满足condition条件的元素。<br>np.argwhere(expression)：返回非0的数组位置的索引，其中expression是要索引数组的条件，非0数组指的时expression中左值对应的数组。<br>a.ptp()：计算数组元素最大值与最小值的差。<br>np.pi：数学中的π。<br>numpy.euler_gamma：数学中的伽马。<br>np.e：欧拉的常数，自然对数的基础，纳皮尔的常数<br>np.newaxis：None的别称，用于增加一个维度。<br>np.inf：IEEE 754 浮点表示（正）无穷大。<br>np.infinity：IEEE 754 浮点表示（正）无穷大。<br>np.infty：IEEE 754浮点表示（正）无穷大。<br>np.pinf：IEEE 754 浮点表示（正）无穷大。<br>np.ninf：IEEE 754 浮点表示负无穷大。<br>np.nan：IEEE 754 浮点表示非数字（NaN）。<br>np.pzero：IEEE 754 浮点表示正零。<br>np.nzero：IEEE 754 浮点表示负零。<br>np.isnan(item)：查看item是否为nan值。<br>np.isinf(item) : 显示item元素是否为正或负无穷大。<br>np.isposinf(item) : 显示item元素是否为正无穷大。<br>np.isneginf(item) : 显示item元素是否为负无穷大。<br>np.isnan(item) : 显示item元素是否不是数字。<br>np.isfinite(item) : 显示item元素是否为有限的（不是非数字，正无穷大和负无穷大中的一个）<br>np.nan_to_num(x)：使用0代替数组x中的nan元素，使用有限的数字代替inf元素。<br>np.unique(a, return_index=False, return_inverse=False, return_counts=False, axis=None)：对于只有a参数的一位数组，去除数组中的重复元素，进行排序后输出；return_index=True返回新列表元素在旧列表中的位置，并以列表形式储存；return_inverse=True返回旧列表元素在新列表中的位置，并以列表形式储存；return_count=True对独特值进行计数。<br>np.digitize(x, bins, right = False)：获得属于数组的每个值的bin的索引数组。<br>np.searchsorted(a, x)：输出x在a中所处数字间的间隔代号。<br>np.sort(a, axis=1)：对a进行排序，默认为按行从小到大排序，当axis=0时按列从小到大排序，会影响列表本身。<br>np.sorted(a, axis=1)：对a进行排序，默认为按行从小到大排序，当axis=0时按列从小到大排序， 不会影响列表本身。<br>np.clip(a, a_min, a_max)：将a的范围限制到[a_min, a_max]之间。<br>np.intersect1d(a1, a2, assume_unique=False)：返回a1中和a2共有的值，当assume_unique为True时，嘉定输入的a1和a2是唯一的，可以加快计算速度。<br>np.setdiff1d(a1, a2, assume_unique=False)：返回a1中和a2差异的值，当assume_unique为True时，嘉定输入的a1和a2是唯一的，可以加快计算速度。<br>np.convolve(a, b, mode=‘full’)：对数组a，b进行卷积运算。<br>np.interp(x, xp, fp)：给定1维数据x中插入点(xp, fp)。<br>np.allclose(a, b)：比较两个array是不是每一元素都相等，默认在1e-05的误差范围内。<br>numpy.trunc(x, /, out=None, *, where=True, casting=’same_kind’, order=’K’, dtype=None, subok=True[, signature, extobj])：以元素方式返回输入的截断值。标量x的截断值是最接近的整数i，它比x更接近零。简而言之，丢弃带符号数x的小数部分。</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;对Numpy库中的函数进行整理&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;学习DL途中对于numpy的一个粗略整理，部分函数只给出常用参数，之后可能会跳出其中几个复杂的做详细记录。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Note" scheme="http://yoursite.com/tags/Note/"/>
    
      <category term="Numpy" scheme="http://yoursite.com/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown学习笔记</title>
    <link href="http://yoursite.com/2020/03/13/Gui-Of-Markdown/"/>
    <id>http://yoursite.com/2020/03/13/Gui-Of-Markdown/</id>
    <published>2020-03-13T06:56:41.000Z</published>
    <updated>2020-04-17T08:50:04.936Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>MarkDown Study</em></strong><br>这几天<del>闲来无事</del>折腾一下hexo，顺便学习一下MarkDown  </p><a id="more"></a><hr><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><h3 id="使用-和-标记"><a href="#使用-和-标记" class="headerlink" title="使用=和-标记"></a>使用=和-标记</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">--------------</span><br><span class="line">二级标题</span><br><span class="line">---------------</span><br></pre></td></tr></table></figure><h2 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h2><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="使用-标记"><a href="#使用-标记" class="headerlink" title="使用#标记"></a>使用#标记</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题  </span></span><br><span class="line"><span class="section">## 二级标题  </span></span><br><span class="line"><span class="section">### 三级标题  </span></span><br><span class="line"><span class="section">#### 四级标题  </span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br></pre></td></tr></table></figure><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h2 id="二、段落"><a href="#二、段落" class="headerlink" title="二、段落"></a>二、段落</h2><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><ul><li>段落的换行是使用两个以上空格加上回车，当一个标题和另一个标题对齐，为防止包裹现象发生赢使用空行。 </li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul><li>*斜体文本*:　　　　　　　　　　　<em>斜体文本</em></li><li>_斜体文本_:　　　　　　　　　　　<em>斜体文本</em></li><li>**粗体文本**:　　　　　　　　　　<strong>粗体文本</strong> </li><li>__粗体文本__:　　　　　　　　　　<strong>粗体文本</strong></li><li>***粗斜体文本***:　　　　　　　　<strong><em>粗斜体文本</em></strong></li><li>___粗斜体文本___:　　　　　　　　<strong><em>粗斜体文本</em></strong></li></ul><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><ul><li>***</li><li>*　*　*</li><li>*****</li><li>- - - </li><li>---------</li></ul><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><ul><li>手动输入空格 （&amp;nbsp；）。注意！此时的分号为英文分号，但是不推荐使用此方法，太麻烦！</li><li>使用全角空格。即：在全角输入状态下直接使用空格键就ok了</li></ul><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><ul><li>~~John~~　　　　　　　　<del>John</del></li></ul><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><ul><li>&lt; u &gt;John&lt;\ u &gt;　　　　　　<u>John</u></li></ul><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建脚注格式类似这样[^John]</span><br><span class="line">[<span class="symbol">^John</span>]: <span class="link">帅帅帅</span></span><br></pre></td></tr></table></figure><p>  　　　　　<br>创建脚注格式类似这样 [^John]。<br>[^John]: 帅帅帅</p><h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*/+/- 第一项</span><br><span class="line">*/+/- 第二项</span><br><span class="line">*/+/- 第三项</span><br></pre></td></tr></table></figure><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>第一项</span><br><span class="line"><span class="bullet">2. </span>第二项</span><br><span class="line"><span class="bullet">3. </span>第三项</span><br></pre></td></tr></table></figure><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>第一项：  </span><br><span class="line"><span class="bullet">    - </span>第一项嵌套的第一个元素  </span><br><span class="line"><span class="bullet">    - </span>第一项嵌套的第二个元素 </span><br><span class="line"><span class="bullet">2. </span>第二项：  </span><br><span class="line"><span class="bullet">    - </span>第二项嵌套的第一个元素  </span><br><span class="line"><span class="bullet">    - </span>第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><ol><li>第一项：  <ul><li>第一项嵌套的第一个元素  </li><li>第一项嵌套的第二个元素 </li></ul></li><li>第二项：  <ul><li>第二项嵌套的第一个元素  </li><li>第二项嵌套的第二个元素</li></ul></li></ol><h2 id="四、区块"><a href="#四、区块" class="headerlink" title="四、区块"></a>四、区块</h2><h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 区块1  </span></span><br><span class="line"><span class="quote">&gt; 区块2  </span></span><br><span class="line"><span class="quote">&gt; 区块3</span></span><br></pre></td></tr></table></figure><blockquote><p>区块1<br>区块2<br>区块3</p></blockquote><h3 id="区块嵌套"><a href="#区块嵌套" class="headerlink" title="区块嵌套"></a>区块嵌套</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 最外层  </span></span><br><span class="line">&gt;&gt; 第一层嵌套  </span><br><span class="line">&gt;&gt;&gt; 第二层嵌套</span><br></pre></td></tr></table></figure><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 区块中使用列表  </span></span><br><span class="line"><span class="quote">&gt; 1. 第一项  </span></span><br><span class="line"><span class="quote">&gt; 2. 第二项  </span></span><br><span class="line"><span class="quote">&gt; + 第一项  </span></span><br><span class="line"><span class="quote">&gt; + 第二项  </span></span><br><span class="line"><span class="quote">&gt; + 第三项</span></span><br></pre></td></tr></table></figure><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>第一项  </span><br><span class="line"><span class="code">    &gt; 菜鸟教程  </span></span><br><span class="line"><span class="code">    &gt; 学的不仅是技术更是梦想  </span></span><br><span class="line"><span class="bullet">* </span>第二项</span><br></pre></td></tr></table></figure><ul><li>第一项<blockquote><p>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote></li><li>第二项</li></ul><h2 id="五、代码"><a href="#五、代码" class="headerlink" title="五、代码"></a>五、代码</h2><h3 id="函数或片段的代码"><a href="#函数或片段的代码" class="headerlink" title="函数或片段的代码"></a>函数或片段的代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`printf()`</span>函数</span><br></pre></td></tr></table></figure><p><code>printf()</code>函数</p><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><ul><li><p>代码区块使用 4 个空格或者一个制表符（Tab 键）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="php"><span class="meta">&lt;?php</span></span></span></span><br><span class="line"><span class="xml">echo 'John';</span></span><br><span class="line"><span class="xml">function test()&#123;</span></span><br><span class="line"><span class="xml">echo 'test';</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>你也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）：  </p></li></ul><p>```javascript<br>$(document).ready(function () {<br>    alert(‘Test’);<br>});<br>```   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Test'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="六、链接"><a href="#六、链接" class="headerlink" title="六、链接"></a>六、链接</h2><h3 id="普通链接"><a href="#普通链接" class="headerlink" title="普通链接"></a>普通链接</h3><ul><li><p>链接名称+链接地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">恭喜获奖，[点击领取](https:&#x2F;&#x2F;www.baidu.com)</span><br></pre></td></tr></table></figure><p>恭喜获奖，<a href="https://www.baidu.com" target="_blank" rel="noopener">点击领取</a></p></li><li><p>直接使用链接地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https:&#x2F;&#x2F;www.baidu.com&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a></p></li></ul><h3 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h3><ul><li>链接也可以用变量来代替，文档末尾附带变量地址：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [<span class="string">Google</span>][<span class="symbol">1</span>]</span><br><span class="line">这个链接用 runoob 作为网址变量 [<span class="string">Baidu</span>][<span class="symbol">baidu</span>]</span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">http://www.google.com/</span></span><br><span class="line">[<span class="symbol">baidu</span>]: <span class="link">http://www.baidu.com/</span></span><br></pre></td></tr></table></figure>这个链接用 1 作为网址变量 <a href="http://www.google.com/" target="_blank" rel="noopener">Google</a><br>这个链接用 baidu 作为网址变量 <a href="http://www.baidu.com/" target="_blank" rel="noopener">Baidu</a></li></ul><h2 id="七、图片"><a href="#七、图片" class="headerlink" title="七、图片"></a>七、图片</h2><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><ul><li>Markdown 图片语法格式如下：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址</span>)</span><br><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址 "可选标题"</span>)</span><br></pre></td></tr></table></figure>菜鸟教程实例：<br><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"><br><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></li></ul><h3 id="对图片网址使用变量"><a href="#对图片网址使用变量" class="headerlink" title="对图片网址使用变量"></a>对图片网址使用变量</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [<span class="string">RUNOOB</span>][<span class="symbol">1</span>].</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">http://static.runoob.com/images/runoob-logo.png</span></span><br></pre></td></tr></table></figure><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/" target="_blank" rel="noopener">RUNOOB</a>.<br>然后在文档的结尾为变量赋值（网址）</p><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><h3 id="表格语法"><a href="#表格语法" class="headerlink" title="表格语法"></a>表格语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#须在之前空出一行</span></span><br><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h3 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h3><ul><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table></li></ul><h2 id="九、高级技巧（以后慢慢补充）"><a href="#九、高级技巧（以后慢慢补充）" class="headerlink" title="九、高级技巧（以后慢慢补充）"></a>九、高级技巧（以后慢慢补充）</h2><h3 id="支持的HTML元素"><a href="#支持的HTML元素" class="headerlink" title="支持的HTML元素"></a>支持的HTML元素</h3><ul><li>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</li></ul><p>目前支持的 HTML 元素有：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">em</span>&gt;</span> <span class="tag">&lt;<span class="name">sup</span>&gt;</span> <span class="tag">&lt;<span class="name">sub</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;MarkDown Study&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;这几天&lt;del&gt;闲来无事&lt;/del&gt;折腾一下hexo，顺便学习一下MarkDown  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="MarkDown" scheme="http://yoursite.com/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>gnome3.36版本解决dash to dock无法使用问题</title>
    <link href="http://yoursite.com/2020/03/12/gnome3-36-dash-to-dock-fix/"/>
    <id>http://yoursite.com/2020/03/12/gnome3-36-dash-to-dock-fix/</id>
    <published>2020-03-12T14:37:05.000Z</published>
    <updated>2020-03-21T16:51:23.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dash-to-dock-can’t-work-well"><a href="#Dash-to-dock-can’t-work-well" class="headerlink" title="Dash to dock can’t work well."></a><em>Dash to dock can’t work well.</em></h2><p>作为一个arch用户，当滚动更新gnome之后虽然觉得登录界面毛玻璃背景和动态效果很好看，但是很多插件无法使用让人着实难受，最要命的是dock插件无法使用带来的极大困扰。。。。。</p><a id="more"></a><hr><ol><li>git clone -b tmp/gnome-3.36 <a href="https://github.com/micheleg/dash-to-dock.git" target="_blank" rel="noopener">https://github.com/micheleg/dash-to-dock.git</a> （国内用户可以使用proxychins代理）  </li><li>cd dash-to-dock</li><li>make &amp;&amp; make install<br>当插件正常更新后删除掉文件夹即可</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Dash-to-dock-can’t-work-well&quot;&gt;&lt;a href=&quot;#Dash-to-dock-can’t-work-well&quot; class=&quot;headerlink&quot; title=&quot;Dash to dock can’t work well.&quot;&gt;&lt;/a&gt;&lt;em&gt;Dash to dock can’t work well.&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;作为一个arch用户，当滚动更新gnome之后虽然觉得登录界面毛玻璃背景和动态效果很好看，但是很多插件无法使用让人着实难受，最要命的是dock插件无法使用带来的极大困扰。。。。。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
